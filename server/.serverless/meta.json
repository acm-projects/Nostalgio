{
  "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server": {
    "versionSfCore": null,
    "versionFramework": "4.4.5",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>",
      "env": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "org": "andresgrc",
            "app": "nostalgio-backend",
            "service": "nostalgio-backend",
            "provider": {
              "name": "aws",
              "runtime": "nodejs18.x",
              "region": "us-east-1",
              "environment": {
                "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                "GOOGLE_API_KEY": "<REDACTED>",
                "USERS_TABLE": "Users",
                "MEMORIES_TABLE": "Memories",
                "AUTH_SESSION_TABLE": "AuthSessionData",
                "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
              },
              "iamRoleStatements": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-idp:AdminCreateUser",
                    "cognito-idp:AdminUpdateUserAttributes",
                    "cognito-idp:AdminInitiateAuth",
                    "cognito-idp:AdminRespondToAuthChallenge",
                    "cognito-idp:ListUsers",
                    "cognito-idp:AdminGetUser",
                    "cognito-idp:AdminDeleteUser"
                  ],
                  "Resource": "arn:aws:cognito-idp:us-east-1:*:userpool/us-east-1_lqzsgfHQr"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:PutItem",
                    "dynamodb:GetItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:DescribeStream",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UsersTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "UsersTable",
                        "StreamArn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "Memories",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "Memories",
                        "StreamArn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "AuthSessionData",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "ListeningHistoryTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "ListeningHistoryTable",
                        "StreamArn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "MusicSuggestionsTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "MusicSuggestionsTable",
                        "StreamArn"
                      ]
                    },
                    "arn:aws:dynamodb:us-east-1:*:table/Users/index/SpotifyUserIdIndex",
                    "arn:aws:dynamodb:us-east-1:*:table/Memories/index/CityUserIndex",
                    "arn:aws:dynamodb:us-east-1:*:table/Memories/index/UserMemoryIndex",
                    "arn:aws:dynamodb:us-east-1:*:table/ListeningHistoryTable/index/TrackIdIndex",
                    "arn:aws:dynamodb:us-east-1:*:table/ListeningHistoryTable/index/UserIdIndex"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ],
              "stage": "dev",
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "SpotifyAuthLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-spotifyAuth"
                    }
                  },
                  "SpotifyCallbackLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-spotifyCallback"
                    }
                  },
                  "ExchangeSpotifyTokenLogGroup": "<REDACTED>",
                  "RefreshSpotifyTokenLogGroup": "<REDACTED>",
                  "ValidateSpotifyTokenLogGroup": "<REDACTED>",
                  "CreateUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-createUser"
                    }
                  },
                  "GetUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getUser"
                    }
                  },
                  "UpdateUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-updateUser"
                    }
                  },
                  "DeleteUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-deleteUser"
                    }
                  },
                  "CreateMemoryLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-createMemory"
                    }
                  },
                  "GetMemoryLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getMemory"
                    }
                  },
                  "UpdateMemoryLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-updateMemory"
                    }
                  },
                  "DeleteMemoryLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-deleteMemory"
                    }
                  },
                  "ListMemoriesLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-listMemories"
                    }
                  },
                  "GetCityMemoriesLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getCityMemories"
                    }
                  },
                  "AddMemoryImageLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-addMemoryImage"
                    }
                  },
                  "StreamMemoryUpdatesLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-streamMemoryUpdates"
                    }
                  },
                  "StoreListeningHistoryLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-storeListeningHistory"
                    }
                  },
                  "GetListeningHistoryByLocationLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getListeningHistoryByLocation"
                    }
                  },
                  "SuggestSongsByLocationLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-suggestSongsByLocation"
                    }
                  },
                  "GetRecentTracksLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getRecentTracks"
                    }
                  },
                  "GetTopTracksLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getTopTracks"
                    }
                  },
                  "GetTopArtistsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getTopArtists"
                    }
                  },
                  "GetCurrentlyPlayingTrackLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getCurrentlyPlayingTrack"
                    }
                  },
                  "CreatePlaylistLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-createPlaylist"
                    }
                  },
                  "AddTrackToPlaylistLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-addTrackToPlaylist"
                    }
                  },
                  "RemoveTrackFromPlaylistLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-removeTrackFromPlaylist"
                    }
                  },
                  "GetPlaylistDetailsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getPlaylistDetails"
                    }
                  },
                  "DeletePlaylistLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-deletePlaylist"
                    }
                  },
                  "SetPlaylistImageLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-setPlaylistImage"
                    }
                  },
                  "ReverseGeocodeLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-reverseGeocode"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "nostalgio-backend",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/nostalgio-backend-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/nostalgio-backend-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "cognito-idp:AdminCreateUser",
                                  "cognito-idp:AdminUpdateUserAttributes",
                                  "cognito-idp:AdminInitiateAuth",
                                  "cognito-idp:AdminRespondToAuthChallenge",
                                  "cognito-idp:ListUsers",
                                  "cognito-idp:AdminGetUser",
                                  "cognito-idp:AdminDeleteUser"
                                ],
                                "Resource": "arn:aws:cognito-idp:us-east-1:*:userpool/us-east-1_lqzsgfHQr"
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "lambda:InvokeFunction"
                                ],
                                "Resource": "*"
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:Query",
                                  "dynamodb:PutItem",
                                  "dynamodb:GetItem",
                                  "dynamodb:UpdateItem",
                                  "dynamodb:DeleteItem",
                                  "dynamodb:DescribeStream",
                                  "dynamodb:GetRecords",
                                  "dynamodb:GetShardIterator"
                                ],
                                "Resource": [
                                  {
                                    "Fn::GetAtt": [
                                      "UsersTable",
                                      "Arn"
                                    ]
                                  },
                                  {
                                    "Fn::GetAtt": [
                                      "UsersTable",
                                      "StreamArn"
                                    ]
                                  },
                                  {
                                    "Fn::GetAtt": [
                                      "Memories",
                                      "Arn"
                                    ]
                                  },
                                  {
                                    "Fn::GetAtt": [
                                      "Memories",
                                      "StreamArn"
                                    ]
                                  },
                                  {
                                    "Fn::GetAtt": [
                                      "AuthSessionData",
                                      "Arn"
                                    ]
                                  },
                                  {
                                    "Fn::GetAtt": [
                                      "ListeningHistoryTable",
                                      "Arn"
                                    ]
                                  },
                                  {
                                    "Fn::GetAtt": [
                                      "ListeningHistoryTable",
                                      "StreamArn"
                                    ]
                                  },
                                  {
                                    "Fn::GetAtt": [
                                      "MusicSuggestionsTable",
                                      "Arn"
                                    ]
                                  },
                                  {
                                    "Fn::GetAtt": [
                                      "MusicSuggestionsTable",
                                      "StreamArn"
                                    ]
                                  },
                                  "arn:aws:dynamodb:us-east-1:*:table/Users/index/SpotifyUserIdIndex",
                                  "arn:aws:dynamodb:us-east-1:*:table/Memories/index/CityUserIndex",
                                  "arn:aws:dynamodb:us-east-1:*:table/Memories/index/UserMemoryIndex",
                                  "arn:aws:dynamodb:us-east-1:*:table/ListeningHistoryTable/index/TrackIdIndex",
                                  "arn:aws:dynamodb:us-east-1:*:table/ListeningHistoryTable/index/UserIdIndex"
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogGroup",
                                  "logs:CreateLogStream",
                                  "logs:PutLogEvents"
                                ],
                                "Resource": "*"
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:GetRecords",
                                  "dynamodb:GetShardIterator",
                                  "dynamodb:DescribeStream",
                                  "dynamodb:ListStreams"
                                ],
                                "Resource": [
                                  {
                                    "Fn::GetAtt": [
                                      "Memories",
                                      "StreamArn"
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "nostalgio-backend",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "SpotifyAuthLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/spotifyAuth.zip"
                      },
                      "Handler": "src/auth/spotify/spotifyAuthHandler.spotifyAuthHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-spotifyAuth",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "SpotifyAuthLogGroup"
                    ]
                  },
                  "SpotifyCallbackLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/spotifyCallback.zip"
                      },
                      "Handler": "src/auth/spotify/spotifyCallbackHandler.spotifyCallbackHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-spotifyCallback",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "SpotifyCallbackLogGroup"
                    ]
                  },
                  "ExchangeSpotifyTokenLambdaFunction": "<REDACTED>",
                  "RefreshSpotifyTokenLambdaFunction": "<REDACTED>",
                  "ValidateSpotifyTokenLambdaFunction": "<REDACTED>",
                  "CreateUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/createUser.zip"
                      },
                      "Handler": "src/users/handlers/createUser.createUserHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-createUser",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateUserLogGroup"
                    ]
                  },
                  "GetUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getUser.zip"
                      },
                      "Handler": "src/users/handlers/getUser.getUserHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-getUser",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetUserLogGroup"
                    ]
                  },
                  "UpdateUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/updateUser.zip"
                      },
                      "Handler": "src/users/handlers/updateUser.updateUserHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-updateUser",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdateUserLogGroup"
                    ]
                  },
                  "DeleteUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/deleteUser.zip"
                      },
                      "Handler": "src/users/handlers/deleteUser.deleteUserHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-deleteUser",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteUserLogGroup"
                    ]
                  },
                  "CreateMemoryLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/createMemory.zip"
                      },
                      "Handler": "src/memories/handlers/createMemory.createMemoryHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-createMemory",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateMemoryLogGroup"
                    ]
                  },
                  "GetMemoryLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getMemory.zip"
                      },
                      "Handler": "src/memories/handlers/getMemory.getMemoryHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-getMemory",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetMemoryLogGroup"
                    ]
                  },
                  "UpdateMemoryLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/updateMemory.zip"
                      },
                      "Handler": "src/memories/handlers/updateMemory.updateMemoryHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-updateMemory",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdateMemoryLogGroup"
                    ]
                  },
                  "DeleteMemoryLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/deleteMemory.zip"
                      },
                      "Handler": "src/memories/handlers/deleteMemory.deleteMemoryHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-deleteMemory",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteMemoryLogGroup"
                    ]
                  },
                  "ListMemoriesLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/listMemories.zip"
                      },
                      "Handler": "src/memories/handlers/listMemories.listMemoriesHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-listMemories",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ListMemoriesLogGroup"
                    ]
                  },
                  "GetCityMemoriesLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getCityMemories.zip"
                      },
                      "Handler": "src/memories/handlers/getCityMemories.getCityMemoriesHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-getCityMemories",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetCityMemoriesLogGroup"
                    ]
                  },
                  "AddMemoryImageLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/addMemoryImage.zip"
                      },
                      "Handler": "src/memories/handlers/addMemoryImage.addMemoryImageHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-addMemoryImage",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "AddMemoryImageLogGroup"
                    ]
                  },
                  "StreamMemoryUpdatesLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/streamMemoryUpdates.zip"
                      },
                      "Handler": "src/memories/handlers/streamMemoryUpdates.streamMemoryUpdatesHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-streamMemoryUpdates",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "StreamMemoryUpdatesLogGroup"
                    ]
                  },
                  "StoreListeningHistoryLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/storeListeningHistory.zip"
                      },
                      "Handler": "src/listeningHistory/handlers/storeListeningHistory.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-storeListeningHistory",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "StoreListeningHistoryLogGroup"
                    ]
                  },
                  "GetListeningHistoryByLocationLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getListeningHistoryByLocation.zip"
                      },
                      "Handler": "src/listeningHistory/handlers/getListeningHistoryByLocation.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-getListeningHistoryByLocation",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetListeningHistoryByLocationLogGroup"
                    ]
                  },
                  "SuggestSongsByLocationLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/suggestSongsByLocation.zip"
                      },
                      "Handler": "src/musicSuggestions/handlers/suggestSongsByLocation.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-suggestSongsByLocation",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "SuggestSongsByLocationLogGroup"
                    ]
                  },
                  "GetRecentTracksLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getRecentTracks.zip"
                      },
                      "Handler": "src/spotify/tracks/handlers/getRecentTracks.getRecentTracksHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-getRecentTracks",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetRecentTracksLogGroup"
                    ]
                  },
                  "GetTopTracksLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getTopTracks.zip"
                      },
                      "Handler": "src/spotify/tracks/handlers/getTopTracks.getTopTracksHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-getTopTracks",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetTopTracksLogGroup"
                    ]
                  },
                  "GetTopArtistsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getTopArtists.zip"
                      },
                      "Handler": "src/spotify/tracks/handlers/getTopArtists.getTopArtistsHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-getTopArtists",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetTopArtistsLogGroup"
                    ]
                  },
                  "GetCurrentlyPlayingTrackLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getCurrentlyPlayingTrack.zip"
                      },
                      "Handler": "src/spotify/tracks/handlers/getCurrentlyPlayingTrack.getCurrentlyPlayingTrackHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-getCurrentlyPlayingTrack",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetCurrentlyPlayingTrackLogGroup"
                    ]
                  },
                  "CreatePlaylistLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/createPlaylist.zip"
                      },
                      "Handler": "src/spotify/playlists/handlers/createPlaylist.createPlaylistHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-createPlaylist",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreatePlaylistLogGroup"
                    ]
                  },
                  "AddTrackToPlaylistLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/addTrackToPlaylist.zip"
                      },
                      "Handler": "src/spotify/playlists/handlers/addTrackToPlaylist.addTrackToPlaylistHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-addTrackToPlaylist",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "AddTrackToPlaylistLogGroup"
                    ]
                  },
                  "RemoveTrackFromPlaylistLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/removeTrackFromPlaylist.zip"
                      },
                      "Handler": "src/spotify/playlists/handlers/removeTrackFromPlaylist.removeTrackFromPlaylistHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-removeTrackFromPlaylist",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "RemoveTrackFromPlaylistLogGroup"
                    ]
                  },
                  "GetPlaylistDetailsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getPlaylistDetails.zip"
                      },
                      "Handler": "src/spotify/playlists/handlers/getPlaylistDetails.getPlaylistDetailsHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-getPlaylistDetails",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetPlaylistDetailsLogGroup"
                    ]
                  },
                  "DeletePlaylistLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/deletePlaylist.zip"
                      },
                      "Handler": "src/spotify/playlists/handlers/deletePlaylist.deletePlaylistHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-deletePlaylist",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeletePlaylistLogGroup"
                    ]
                  },
                  "SetPlaylistImageLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/setPlaylistImage.zip"
                      },
                      "Handler": "src/spotify/playlists/handlers/setPlaylistImage.setPlaylistImageHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-setPlaylistImage",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "SetPlaylistImageLogGroup"
                    ]
                  },
                  "ReverseGeocodeLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/reverseGeocode.zip"
                      },
                      "Handler": "src/locations/handlers/reverseGeocode.reverseGeocodeHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-reverseGeocode",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ReverseGeocodeLogGroup"
                    ]
                  },
                  "SpotifyAuthLambdaVersionJbR8Cp3sua5TftesoXh50qapDR3qfCGKlq4UyZJkmOY": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "SpotifyAuthLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "RefreshSpotifyTokenLambdaVersionGodXQfdYONmaVkETjzJcs2mIhWV6WDn5wxmPVBIz0": "<REDACTED>",
                  "ExchangeSpotifyTokenLambdaVersionE1uewPFe3tljbfAvZkLwr0srO1NaKHpdYbJqLvktVY": "<REDACTED>",
                  "SpotifyCallbackLambdaVersionzvT3hECX4Fa89pCv14JCDIevLI2WJYlGGcmcwLwiPqY": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "SpotifyCallbackLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "UpdateUserLambdaVersion3oz9SvHtAenKQY5GyjUifdzkRHn6KdPq7yc73iJf3xE": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateUserLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "CreateUserLambdaVersionkg1G5WcMhKigmzuzRf85uFIXEyAHQmIShiNYZ35zd4I": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateUserLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "GetUserLambdaVersion7yXclQ6G00RaNbY0oj4FxgRHVlOJmaVRE3Ory6wksY": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetUserLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "CreateMemoryLambdaVersionxikP1oC4J8DvK5qo1YmawnQSgFGC5eVyt6PrlKdwlrY": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateMemoryLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "UpdateMemoryLambdaVersionZT9mAaN3L4vOvxL12Mn3OaMgESgDEfSoQ1VUlfWHGs": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateMemoryLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "DeleteUserLambdaVersionTbLvqe25V1RjXsclZqB6JpjPugEWqZgZaIRFz7hlu2w": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteUserLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "DeleteMemoryLambdaVersionwuu45y6L5uMFsiZEq2Ci0IQfT9blmRitOZ7Xg4Ow": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteMemoryLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "ValidateSpotifyTokenLambdaVersionin1pt91wmdxWLNSm6SFEQkbhy5xqWofhrFGgfqDavmY": "<REDACTED>",
                  "AddMemoryImageLambdaVersionPW0sPbjahY4Y8rFnu9nPKvbGtaX6yn3y36j2YJ4UhY": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "AddMemoryImageLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "GetMemoryLambdaVersions1eZSLNBSc3RPtefH7eaLEU94Ag8hfOtHtjAyu5EQ": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetMemoryLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "ListMemoriesLambdaVersion4cl9DrJTrpSVo28ylNREv8nGBPyJkFiFBUWoKqs": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ListMemoriesLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "GetCityMemoriesLambdaVersion71dPDd3NUkNVE88VGCTlSdMmpYay5r2Ax0BzopQ": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetCityMemoriesLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "SuggestSongsByLocationLambdaVersionIXpiMKsTZHkQGzKkq4poCvhMRPUynNcJ0uUyfJNXms": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "SuggestSongsByLocationLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "GetCurrentlyPlayingTrackLambdaVersionSALxifadhMxfPVF5lWCOdBGPHv64I3ETFPuwdD1MU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetCurrentlyPlayingTrackLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "StoreListeningHistoryLambdaVersionjRDsLKzynq5NwvfXsBUZkaMTi2L3TDcvA1CuHLzv70": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "StoreListeningHistoryLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "StreamMemoryUpdatesLambdaVersionCoVwkP6CDRNY7yUorfgX1gwze9UlaA4Xt2nbv0XtYM": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "StreamMemoryUpdatesLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "RemoveTrackFromPlaylistLambdaVersionjRi7ZqmWp0WD1Jb9esFmn1VufvLqETYHATFM8byuh4U": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "RemoveTrackFromPlaylistLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "GetListeningHistoryByLocationLambdaVersionD21EfbEJr1U6Ndgg368pPNmHbTe1cjvekAZbQkf0A": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetListeningHistoryByLocationLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "GetTopArtistsLambdaVersionwolLGNVMJo6bXl4UfiReP3KUnhERyZqi4l0VxTiYKI": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetTopArtistsLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "CreatePlaylistLambdaVersionBp6me3UEkA9FXDqSdIVap7bIHYOIZ512TBuTkQCcI": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreatePlaylistLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "GetRecentTracksLambdaVersionhTHgheDMEeJsVFGrG4PgMB3QMbVyUVr8CvQT2NVkeE": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetRecentTracksLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "GetTopTracksLambdaVersionQBH4mZXSDLhy2NqJPje1lq15sJnv9DKSarYIfRvHDU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetTopTracksLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "AddTrackToPlaylistLambdaVersionXBkTBIvIOwQJvR8ct5mWMlIdrWTrULDy42lfQ81SQU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "AddTrackToPlaylistLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "GetPlaylistDetailsLambdaVersion9UemFCBbDWYSLPNt8H1mkFnut51CZvUe9ZdHPL3yQ": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetPlaylistDetailsLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "DeletePlaylistLambdaVersionrWbClJ7NiaNk1jo7Dv4yqu530EhMYZxugnxspnO0U": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeletePlaylistLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "SetPlaylistImageLambdaVersionRpesbiItoRavEjIARF0t4rGaEMR6HNmLztW1J8gimk": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "SetPlaylistImageLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "ReverseGeocodeLambdaVersionMNRpCoGfcKG6cQo56dUjibMnzukcGO43H64Z2zKPLM": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ReverseGeocodeLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-nostalgio-backend",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceAuth": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "auth",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceAuthLogin": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceAuth"
                      },
                      "PathPart": "login",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceCallback": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "callback",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceExchangespotifytoken": "<REDACTED>",
                  "ApiGatewayResourceRefreshspotifytoken": "<REDACTED>",
                  "ApiGatewayResourceValidatespotifytoken": "<REDACTED>",
                  "ApiGatewayResourceValidatespotifytokenUseridVar": "<REDACTED>",
                  "ApiGatewayResourceUsers": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "users",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersUseridVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsers"
                      },
                      "PathPart": "{userId}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersUseridVarSuggestions": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsersUseridVar"
                      },
                      "PathPart": "suggestions",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersUseridVarSuggestionsLocation": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSuggestions"
                      },
                      "PathPart": "location",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersUseridVarSpotify": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsersUseridVar"
                      },
                      "PathPart": "spotify",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersUseridVarSpotifyRecentDashtracks": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotify"
                      },
                      "PathPart": "recent-tracks",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersUseridVarSpotifyTopDashtracks": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotify"
                      },
                      "PathPart": "top-tracks",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersUseridVarSpotifyTopDashartists": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotify"
                      },
                      "PathPart": "top-artists",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersUseridVarSpotifyCurrentlyDashplaying": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotify"
                      },
                      "PathPart": "currently-playing",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersSpotify": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsers"
                      },
                      "PathPart": "spotify",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersSpotifySpotifyuseridVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsersSpotify"
                      },
                      "PathPart": "{spotifyUserId}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMemories": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "memories",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMemoriesUseridVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceMemories"
                      },
                      "PathPart": "{userId}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMemoriesUseridVarMemoryidVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVar"
                      },
                      "PathPart": "{memoryId}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMemoriesUseridVarMemoryidVarImage": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVar"
                      },
                      "PathPart": "image",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMemoriesUseridVarCity": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVar"
                      },
                      "PathPart": "city",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMemoriesUseridVarCityCityVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarCity"
                      },
                      "PathPart": "{city}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceListeningDashhistory": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "listening-history",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceListeningDashhistoryStore": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceListeningDashhistory"
                      },
                      "PathPart": "store",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceListeningDashhistoryLatVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceListeningDashhistory"
                      },
                      "PathPart": "{lat}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceListeningDashhistoryLatVarLonVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceListeningDashhistoryLatVar"
                      },
                      "PathPart": "{lon}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePlaylists": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "playlists",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePlaylistsUseridVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourcePlaylists"
                      },
                      "PathPart": "{userId}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePlaylistsUseridVarPlaylistidVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVar"
                      },
                      "PathPart": "{playlistId}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarTracks": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVar"
                      },
                      "PathPart": "tracks",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarImage": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVar"
                      },
                      "PathPart": "image",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceReversegeocode": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "reverseGeocode",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodAuthLoginOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceAuthLogin"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodCallbackOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceCallback"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodExchangespotifytokenOptions": "<REDACTED>",
                  "ApiGatewayMethodRefreshspotifytokenOptions": "<REDACTED>",
                  "ApiGatewayMethodValidatespotifytokenUseridVarOptions": "<REDACTED>",
                  "ApiGatewayMethodUsersOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsers"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUsersUseridVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUsersSpotifySpotifyuseridVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersSpotifySpotifyuseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMemoriesOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemories"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMemoriesUseridVarMemoryidVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMemoriesUseridVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMemoriesUseridVarCityCityVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarCityCityVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMemoriesUseridVarMemoryidVarImageOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVarImage"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodListeningDashhistoryStoreOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceListeningDashhistoryStore"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodListeningDashhistoryLatVarLonVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceListeningDashhistoryLatVarLonVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUsersUseridVarSuggestionsLocationOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSuggestionsLocation"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUsersUseridVarSpotifyRecentDashtracksOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotifyRecentDashtracks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUsersUseridVarSpotifyTopDashtracksOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotifyTopDashtracks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUsersUseridVarSpotifyTopDashartistsOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotifyTopDashartists"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUsersUseridVarSpotifyCurrentlyDashplayingOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotifyCurrentlyDashplaying"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodPlaylistsUseridVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarTracksOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarTracks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarImageOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarImage"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodReversegeocodeOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceReversegeocode"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodAuthLoginGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceAuthLogin"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "SpotifyAuthLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "SpotifyAuthLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodCallbackGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceCallback"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "SpotifyCallbackLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "SpotifyCallbackLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodExchangespotifytokenPost": "<REDACTED>",
                  "ApiGatewayMethodRefreshspotifytokenPost": "<REDACTED>",
                  "ApiGatewayMethodValidatespotifytokenUseridVarPost": "<REDACTED>",
                  "ApiGatewayMethodUsersPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsers"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateUserLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreateUserLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUsersUseridVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetUserLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetUserLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUsersSpotifySpotifyuseridVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersSpotifySpotifyuseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetUserLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetUserLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUsersUseridVarPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdateUserLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "UpdateUserLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUsersUseridVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteUserLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteUserLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMemoriesPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemories"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateMemoryLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreateMemoryLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMemoriesUseridVarMemoryidVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetMemoryLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetMemoryLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMemoriesUseridVarMemoryidVarPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdateMemoryLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "UpdateMemoryLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMemoriesUseridVarMemoryidVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteMemoryLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteMemoryLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMemoriesUseridVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "ListMemoriesLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "ListMemoriesLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMemoriesUseridVarCityCityVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarCityCityVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetCityMemoriesLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetCityMemoriesLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMemoriesUseridVarMemoryidVarImagePut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVarImage"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AddMemoryImageLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "AddMemoryImageLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodListeningDashhistoryStorePost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceListeningDashhistoryStore"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "StoreListeningHistoryLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "StoreListeningHistoryLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodListeningDashhistoryLatVarLonVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {
                        "method.request.querystring.radius": false,
                        "method.request.path.lat": true,
                        "method.request.path.lon": true
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceListeningDashhistoryLatVarLonVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetListeningHistoryByLocationLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": [],
                      "RequestValidatorId": {
                        "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                      }
                    },
                    "DependsOn": [
                      "GetListeningHistoryByLocationLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUsersUseridVarSuggestionsLocationGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {
                        "method.request.querystring.lat": true,
                        "method.request.querystring.lon": true,
                        "method.request.querystring.radius": false
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSuggestionsLocation"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "SuggestSongsByLocationLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": [],
                      "RequestValidatorId": {
                        "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                      }
                    },
                    "DependsOn": [
                      "SuggestSongsByLocationLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUsersUseridVarSpotifyRecentDashtracksGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotifyRecentDashtracks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetRecentTracksLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetRecentTracksLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUsersUseridVarSpotifyTopDashtracksGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotifyTopDashtracks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetTopTracksLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetTopTracksLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUsersUseridVarSpotifyTopDashartistsGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotifyTopDashartists"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetTopArtistsLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetTopArtistsLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUsersUseridVarSpotifyCurrentlyDashplayingGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {
                        "method.request.path.userId": true
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotifyCurrentlyDashplaying"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetCurrentlyPlayingTrackLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": [],
                      "RequestValidatorId": {
                        "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                      }
                    },
                    "DependsOn": [
                      "GetCurrentlyPlayingTrackLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPlaylistsUseridVarPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {
                        "method.request.path.userId": true
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreatePlaylistLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": [],
                      "RequestValidatorId": {
                        "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                      }
                    },
                    "DependsOn": [
                      "CreatePlaylistLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarTracksPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {
                        "method.request.path.userId": true,
                        "method.request.path.playlistId": true
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarTracks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AddTrackToPlaylistLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": [],
                      "RequestValidatorId": {
                        "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                      }
                    },
                    "DependsOn": [
                      "AddTrackToPlaylistLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarTracksDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {
                        "method.request.path.userId": true,
                        "method.request.path.playlistId": true
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarTracks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "RemoveTrackFromPlaylistLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": [],
                      "RequestValidatorId": {
                        "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                      }
                    },
                    "DependsOn": [
                      "RemoveTrackFromPlaylistLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {
                        "method.request.path.userId": true,
                        "method.request.path.playlistId": true
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetPlaylistDetailsLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": [],
                      "RequestValidatorId": {
                        "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                      }
                    },
                    "DependsOn": [
                      "GetPlaylistDetailsLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeletePlaylistLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeletePlaylistLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarImagePut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarImage"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "SetPlaylistImageLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "SetPlaylistImageLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodReversegeocodeGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {
                        "method.request.querystring.latitude": true,
                        "method.request.querystring.longitude": true
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceReversegeocode"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "ReverseGeocodeLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": [],
                      "RequestValidatorId": {
                        "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                      }
                    },
                    "DependsOn": [
                      "ReverseGeocodeLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayNostalgiobackendRequestValidator": {
                    "Type": "AWS::ApiGateway::RequestValidator",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ValidateRequestBody": true,
                      "ValidateRequestParameters": true,
                      "Name": "nostalgio-backend-dev | Validate request body and querystring parameters"
                    }
                  },
                  "ApiGatewayDeployment1728528928183": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodAuthLoginOptions",
                      "ApiGatewayMethodCallbackOptions",
                      "ApiGatewayMethodExchangespotifytokenOptions",
                      "ApiGatewayMethodRefreshspotifytokenOptions",
                      "ApiGatewayMethodValidatespotifytokenUseridVarOptions",
                      "ApiGatewayMethodUsersOptions",
                      "ApiGatewayMethodUsersUseridVarOptions",
                      "ApiGatewayMethodUsersSpotifySpotifyuseridVarOptions",
                      "ApiGatewayMethodMemoriesOptions",
                      "ApiGatewayMethodMemoriesUseridVarMemoryidVarOptions",
                      "ApiGatewayMethodMemoriesUseridVarOptions",
                      "ApiGatewayMethodMemoriesUseridVarCityCityVarOptions",
                      "ApiGatewayMethodMemoriesUseridVarMemoryidVarImageOptions",
                      "ApiGatewayMethodListeningDashhistoryStoreOptions",
                      "ApiGatewayMethodListeningDashhistoryLatVarLonVarOptions",
                      "ApiGatewayMethodUsersUseridVarSuggestionsLocationOptions",
                      "ApiGatewayMethodUsersUseridVarSpotifyRecentDashtracksOptions",
                      "ApiGatewayMethodUsersUseridVarSpotifyTopDashtracksOptions",
                      "ApiGatewayMethodUsersUseridVarSpotifyTopDashartistsOptions",
                      "ApiGatewayMethodUsersUseridVarSpotifyCurrentlyDashplayingOptions",
                      "ApiGatewayMethodPlaylistsUseridVarOptions",
                      "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarTracksOptions",
                      "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarOptions",
                      "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarImageOptions",
                      "ApiGatewayMethodReversegeocodeOptions",
                      "ApiGatewayMethodAuthLoginGet",
                      "ApiGatewayMethodCallbackGet",
                      "ApiGatewayMethodExchangespotifytokenPost",
                      "ApiGatewayMethodRefreshspotifytokenPost",
                      "ApiGatewayMethodValidatespotifytokenUseridVarPost",
                      "ApiGatewayMethodUsersPost",
                      "ApiGatewayMethodUsersUseridVarGet",
                      "ApiGatewayMethodUsersSpotifySpotifyuseridVarGet",
                      "ApiGatewayMethodUsersUseridVarPut",
                      "ApiGatewayMethodUsersUseridVarDelete",
                      "ApiGatewayMethodMemoriesPost",
                      "ApiGatewayMethodMemoriesUseridVarMemoryidVarGet",
                      "ApiGatewayMethodMemoriesUseridVarMemoryidVarPut",
                      "ApiGatewayMethodMemoriesUseridVarMemoryidVarDelete",
                      "ApiGatewayMethodMemoriesUseridVarGet",
                      "ApiGatewayMethodMemoriesUseridVarCityCityVarGet",
                      "ApiGatewayMethodMemoriesUseridVarMemoryidVarImagePut",
                      "ApiGatewayMethodListeningDashhistoryStorePost",
                      "ApiGatewayMethodListeningDashhistoryLatVarLonVarGet",
                      "ApiGatewayMethodUsersUseridVarSuggestionsLocationGet",
                      "ApiGatewayMethodUsersUseridVarSpotifyRecentDashtracksGet",
                      "ApiGatewayMethodUsersUseridVarSpotifyTopDashtracksGet",
                      "ApiGatewayMethodUsersUseridVarSpotifyTopDashartistsGet",
                      "ApiGatewayMethodUsersUseridVarSpotifyCurrentlyDashplayingGet",
                      "ApiGatewayMethodPlaylistsUseridVarPost",
                      "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarTracksPost",
                      "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarTracksDelete",
                      "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarGet",
                      "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarDelete",
                      "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarImagePut",
                      "ApiGatewayMethodReversegeocodeGet"
                    ]
                  },
                  "SpotifyAuthLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "SpotifyAuthLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "SpotifyCallbackLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "SpotifyCallbackLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ExchangeSpotifyTokenLambdaPermissionApiGateway": "<REDACTED>",
                  "RefreshSpotifyTokenLambdaPermissionApiGateway": "<REDACTED>",
                  "ValidateSpotifyTokenLambdaPermissionApiGateway": "<REDACTED>",
                  "CreateUserLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetUserLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdateUserLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteUserLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateMemoryLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateMemoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetMemoryLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetMemoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdateMemoryLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateMemoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteMemoryLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteMemoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ListMemoriesLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ListMemoriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetCityMemoriesLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetCityMemoriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "AddMemoryImageLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "AddMemoryImageLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "StoreListeningHistoryLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "StoreListeningHistoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetListeningHistoryByLocationLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetListeningHistoryByLocationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "SuggestSongsByLocationLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "SuggestSongsByLocationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetRecentTracksLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetRecentTracksLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetTopTracksLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetTopTracksLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetTopArtistsLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetTopArtistsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetCurrentlyPlayingTrackLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetCurrentlyPlayingTrackLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "CreatePlaylistLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreatePlaylistLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "AddTrackToPlaylistLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "AddTrackToPlaylistLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "RemoveTrackFromPlaylistLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "RemoveTrackFromPlaylistLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetPlaylistDetailsLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetPlaylistDetailsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeletePlaylistLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeletePlaylistLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "SetPlaylistImageLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "SetPlaylistImageLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ReverseGeocodeLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ReverseGeocodeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "StreamMemoryUpdatesEventSourceMappingDynamodbMemories": {
                    "Type": "AWS::Lambda::EventSourceMapping",
                    "DependsOn": [
                      "IamRoleLambdaExecution"
                    ],
                    "Properties": {
                      "BatchSize": 10,
                      "Enabled": true,
                      "EventSourceArn": {
                        "Fn::GetAtt": [
                          "Memories",
                          "StreamArn"
                        ]
                      },
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "StreamMemoryUpdatesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "StartingPosition": "TRIM_HORIZON"
                    }
                  },
                  "AuthSessionData": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "AuthSessionData",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "UserId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "UserId",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST",
                      "TimeToLiveSpecification": {
                        "AttributeName": "ExpiresAt",
                        "Enabled": true
                      }
                    }
                  },
                  "UsersTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "Users",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "UserId",
                          "AttributeType": "S"
                        },
                        {
                          "AttributeName": "SpotifyUserId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "UserId",
                          "KeyType": "HASH"
                        }
                      ],
                      "GlobalSecondaryIndexes": [
                        {
                          "IndexName": "SpotifyUserIdIndex",
                          "KeySchema": [
                            {
                              "AttributeName": "SpotifyUserId",
                              "KeyType": "HASH"
                            }
                          ],
                          "Projection": {
                            "ProjectionType": "ALL"
                          }
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST",
                      "StreamSpecification": {
                        "StreamViewType": "NEW_AND_OLD_IMAGES"
                      }
                    }
                  },
                  "Memories": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "Memories",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "memoryId",
                          "AttributeType": "S"
                        },
                        {
                          "AttributeName": "city",
                          "AttributeType": "S"
                        },
                        {
                          "AttributeName": "userId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "memoryId",
                          "KeyType": "HASH"
                        }
                      ],
                      "GlobalSecondaryIndexes": [
                        {
                          "IndexName": "CityUserIndex",
                          "KeySchema": [
                            {
                              "AttributeName": "userId",
                              "KeyType": "HASH"
                            },
                            {
                              "AttributeName": "city",
                              "KeyType": "RANGE"
                            }
                          ],
                          "Projection": {
                            "ProjectionType": "ALL"
                          }
                        },
                        {
                          "IndexName": "UserMemoryIndex",
                          "KeySchema": [
                            {
                              "AttributeName": "userId",
                              "KeyType": "HASH"
                            }
                          ],
                          "Projection": {
                            "ProjectionType": "ALL"
                          }
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST",
                      "StreamSpecification": {
                        "StreamViewType": "NEW_AND_OLD_IMAGES"
                      }
                    }
                  },
                  "ListeningHistoryTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "ListeningHistoryTable",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "geohash",
                          "AttributeType": "S"
                        },
                        {
                          "AttributeName": "timestamp",
                          "AttributeType": "N"
                        },
                        {
                          "AttributeName": "trackId",
                          "AttributeType": "S"
                        },
                        {
                          "AttributeName": "userId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "geohash",
                          "KeyType": "HASH"
                        },
                        {
                          "AttributeName": "timestamp",
                          "KeyType": "RANGE"
                        }
                      ],
                      "GlobalSecondaryIndexes": [
                        {
                          "IndexName": "TrackIdIndex",
                          "KeySchema": [
                            {
                              "AttributeName": "trackId",
                              "KeyType": "HASH"
                            },
                            {
                              "AttributeName": "timestamp",
                              "KeyType": "RANGE"
                            }
                          ],
                          "Projection": {
                            "ProjectionType": "ALL"
                          }
                        },
                        {
                          "IndexName": "UserIdIndex",
                          "KeySchema": [
                            {
                              "AttributeName": "userId",
                              "KeyType": "HASH"
                            },
                            {
                              "AttributeName": "timestamp",
                              "KeyType": "RANGE"
                            }
                          ],
                          "Projection": {
                            "ProjectionType": "ALL"
                          }
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST",
                      "StreamSpecification": {
                        "StreamViewType": "NEW_AND_OLD_IMAGES"
                      }
                    }
                  },
                  "MusicSuggestionsTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "MusicSuggestionsTable",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "locationId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "locationId",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST",
                      "StreamSpecification": {
                        "StreamViewType": "NEW_AND_OLD_IMAGES"
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "SpotifyAuthLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "SpotifyAuthLambdaVersionJbR8Cp3sua5TftesoXh50qapDR3qfCGKlq4UyZJkmOY"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-SpotifyAuthLambdaFunctionQualifiedArn"
                    }
                  },
                  "RefreshSpotifyTokenLambdaFunctionQualifiedArn": "<REDACTED>",
                  "ExchangeSpotifyTokenLambdaFunctionQualifiedArn": "<REDACTED>",
                  "SpotifyCallbackLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "SpotifyCallbackLambdaVersionzvT3hECX4Fa89pCv14JCDIevLI2WJYlGGcmcwLwiPqY"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-SpotifyCallbackLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateUserLambdaVersion3oz9SvHtAenKQY5GyjUifdzkRHn6KdPq7yc73iJf3xE"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-UpdateUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateUserLambdaVersionkg1G5WcMhKigmzuzRf85uFIXEyAHQmIShiNYZ35zd4I"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-CreateUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetUserLambdaVersion7yXclQ6G00RaNbY0oj4FxgRHVlOJmaVRE3Ory6wksY"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-GetUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateMemoryLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateMemoryLambdaVersionxikP1oC4J8DvK5qo1YmawnQSgFGC5eVyt6PrlKdwlrY"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-CreateMemoryLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateMemoryLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateMemoryLambdaVersionZT9mAaN3L4vOvxL12Mn3OaMgESgDEfSoQ1VUlfWHGs"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-UpdateMemoryLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteUserLambdaVersionTbLvqe25V1RjXsclZqB6JpjPugEWqZgZaIRFz7hlu2w"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-DeleteUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteMemoryLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteMemoryLambdaVersionwuu45y6L5uMFsiZEq2Ci0IQfT9blmRitOZ7Xg4Ow"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-DeleteMemoryLambdaFunctionQualifiedArn"
                    }
                  },
                  "ValidateSpotifyTokenLambdaFunctionQualifiedArn": "<REDACTED>",
                  "AddMemoryImageLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "AddMemoryImageLambdaVersionPW0sPbjahY4Y8rFnu9nPKvbGtaX6yn3y36j2YJ4UhY"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-AddMemoryImageLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetMemoryLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetMemoryLambdaVersions1eZSLNBSc3RPtefH7eaLEU94Ag8hfOtHtjAyu5EQ"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-GetMemoryLambdaFunctionQualifiedArn"
                    }
                  },
                  "ListMemoriesLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ListMemoriesLambdaVersion4cl9DrJTrpSVo28ylNREv8nGBPyJkFiFBUWoKqs"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-ListMemoriesLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetCityMemoriesLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetCityMemoriesLambdaVersion71dPDd3NUkNVE88VGCTlSdMmpYay5r2Ax0BzopQ"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-GetCityMemoriesLambdaFunctionQualifiedArn"
                    }
                  },
                  "SuggestSongsByLocationLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "SuggestSongsByLocationLambdaVersionIXpiMKsTZHkQGzKkq4poCvhMRPUynNcJ0uUyfJNXms"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-SuggestSongsByLocationLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetCurrentlyPlayingTrackLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetCurrentlyPlayingTrackLambdaVersionSALxifadhMxfPVF5lWCOdBGPHv64I3ETFPuwdD1MU"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-GetCurrentlyPlayingTrackLambdaFunctionQualifiedArn"
                    }
                  },
                  "StoreListeningHistoryLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "StoreListeningHistoryLambdaVersionjRDsLKzynq5NwvfXsBUZkaMTi2L3TDcvA1CuHLzv70"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-StoreListeningHistoryLambdaFunctionQualifiedArn"
                    }
                  },
                  "StreamMemoryUpdatesLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "StreamMemoryUpdatesLambdaVersionCoVwkP6CDRNY7yUorfgX1gwze9UlaA4Xt2nbv0XtYM"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-StreamMemoryUpdatesLambdaFunctionQualifiedArn"
                    }
                  },
                  "RemoveTrackFromPlaylistLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "RemoveTrackFromPlaylistLambdaVersionjRi7ZqmWp0WD1Jb9esFmn1VufvLqETYHATFM8byuh4U"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-RemoveTrackFromPlaylistLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetListeningHistoryByLocationLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetListeningHistoryByLocationLambdaVersionD21EfbEJr1U6Ndgg368pPNmHbTe1cjvekAZbQkf0A"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-GetListeningHistoryByLocationLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetTopArtistsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetTopArtistsLambdaVersionwolLGNVMJo6bXl4UfiReP3KUnhERyZqi4l0VxTiYKI"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-GetTopArtistsLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreatePlaylistLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreatePlaylistLambdaVersionBp6me3UEkA9FXDqSdIVap7bIHYOIZ512TBuTkQCcI"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-CreatePlaylistLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetRecentTracksLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetRecentTracksLambdaVersionhTHgheDMEeJsVFGrG4PgMB3QMbVyUVr8CvQT2NVkeE"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-GetRecentTracksLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetTopTracksLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetTopTracksLambdaVersionQBH4mZXSDLhy2NqJPje1lq15sJnv9DKSarYIfRvHDU"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-GetTopTracksLambdaFunctionQualifiedArn"
                    }
                  },
                  "AddTrackToPlaylistLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "AddTrackToPlaylistLambdaVersionXBkTBIvIOwQJvR8ct5mWMlIdrWTrULDy42lfQ81SQU"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-AddTrackToPlaylistLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetPlaylistDetailsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetPlaylistDetailsLambdaVersion9UemFCBbDWYSLPNt8H1mkFnut51CZvUe9ZdHPL3yQ"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-GetPlaylistDetailsLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeletePlaylistLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeletePlaylistLambdaVersionrWbClJ7NiaNk1jo7Dv4yqu530EhMYZxugnxspnO0U"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-DeletePlaylistLambdaFunctionQualifiedArn"
                    }
                  },
                  "SetPlaylistImageLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "SetPlaylistImageLambdaVersionRpesbiItoRavEjIARF0t4rGaEMR6HNmLztW1J8gimk"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-SetPlaylistImageLambdaFunctionQualifiedArn"
                    }
                  },
                  "ReverseGeocodeLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ReverseGeocodeLambdaVersionMNRpCoGfcKG6cQo56dUjibMnzukcGO43H64Z2zKPLM"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-ReverseGeocodeLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "package": {
              "individually": true,
              "artifactsS3KeyDirname": "serverless/nostalgio-backend/dev/code-artifacts",
              "deploymentBucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
              "artifactDirectoryName": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z"
            },
            "plugins": [
              "serverless-offline"
            ],
            "functions": {
              "spotifyAuth": {
                "handler": "src/auth/spotify/spotifyAuthHandler.spotifyAuthHandler",
                "events": [
                  {
                    "http": {
                      "path": "auth/login",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-spotifyAuth",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/spotifyAuth.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "SpotifyAuthLambdaVersionJbR8Cp3sua5TftesoXh50qapDR3qfCGKlq4UyZJkmOY"
              },
              "spotifyCallback": {
                "handler": "src/auth/spotify/spotifyCallbackHandler.spotifyCallbackHandler",
                "events": [
                  {
                    "http": {
                      "path": "callback",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-spotifyCallback",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/spotifyCallback.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "SpotifyCallbackLambdaVersionzvT3hECX4Fa89pCv14JCDIevLI2WJYlGGcmcwLwiPqY"
              },
              "exchangeSpotifyToken": "<REDACTED>",
              "refreshSpotifyToken": "<REDACTED>",
              "validateSpotifyToken": "<REDACTED>",
              "createUser": {
                "handler": "src/users/handlers/createUser.createUserHandler",
                "events": [
                  {
                    "http": {
                      "path": "users",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-createUser",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/createUser.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "CreateUserLambdaVersionkg1G5WcMhKigmzuzRf85uFIXEyAHQmIShiNYZ35zd4I"
              },
              "getUser": {
                "handler": "src/users/handlers/getUser.getUserHandler",
                "events": [
                  {
                    "http": {
                      "path": "users/{userId}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  },
                  {
                    "http": {
                      "path": "users/spotify/{spotifyUserId}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-getUser",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getUser.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetUserLambdaVersion7yXclQ6G00RaNbY0oj4FxgRHVlOJmaVRE3Ory6wksY"
              },
              "updateUser": {
                "handler": "src/users/handlers/updateUser.updateUserHandler",
                "events": [
                  {
                    "http": {
                      "path": "users/{userId}",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-updateUser",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/updateUser.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "UpdateUserLambdaVersion3oz9SvHtAenKQY5GyjUifdzkRHn6KdPq7yc73iJf3xE"
              },
              "deleteUser": {
                "handler": "src/users/handlers/deleteUser.deleteUserHandler",
                "events": [
                  {
                    "http": {
                      "path": "users/{userId}",
                      "method": "delete",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-deleteUser",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/deleteUser.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "DeleteUserLambdaVersionTbLvqe25V1RjXsclZqB6JpjPugEWqZgZaIRFz7hlu2w"
              },
              "createMemory": {
                "handler": "src/memories/handlers/createMemory.createMemoryHandler",
                "events": [
                  {
                    "http": {
                      "path": "memories",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-createMemory",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/createMemory.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "CreateMemoryLambdaVersionxikP1oC4J8DvK5qo1YmawnQSgFGC5eVyt6PrlKdwlrY"
              },
              "getMemory": {
                "handler": "src/memories/handlers/getMemory.getMemoryHandler",
                "events": [
                  {
                    "http": {
                      "path": "memories/{userId}/{memoryId}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-getMemory",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getMemory.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetMemoryLambdaVersions1eZSLNBSc3RPtefH7eaLEU94Ag8hfOtHtjAyu5EQ"
              },
              "updateMemory": {
                "handler": "src/memories/handlers/updateMemory.updateMemoryHandler",
                "events": [
                  {
                    "http": {
                      "path": "memories/{userId}/{memoryId}",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-updateMemory",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/updateMemory.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "UpdateMemoryLambdaVersionZT9mAaN3L4vOvxL12Mn3OaMgESgDEfSoQ1VUlfWHGs"
              },
              "deleteMemory": {
                "handler": "src/memories/handlers/deleteMemory.deleteMemoryHandler",
                "events": [
                  {
                    "http": {
                      "path": "memories/{userId}/{memoryId}",
                      "method": "delete",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-deleteMemory",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/deleteMemory.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "DeleteMemoryLambdaVersionwuu45y6L5uMFsiZEq2Ci0IQfT9blmRitOZ7Xg4Ow"
              },
              "listMemories": {
                "handler": "src/memories/handlers/listMemories.listMemoriesHandler",
                "events": [
                  {
                    "http": {
                      "path": "memories/{userId}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-listMemories",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/listMemories.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "ListMemoriesLambdaVersion4cl9DrJTrpSVo28ylNREv8nGBPyJkFiFBUWoKqs"
              },
              "getCityMemories": {
                "handler": "src/memories/handlers/getCityMemories.getCityMemoriesHandler",
                "events": [
                  {
                    "http": {
                      "path": "memories/{userId}/city/{city}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-getCityMemories",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getCityMemories.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetCityMemoriesLambdaVersion71dPDd3NUkNVE88VGCTlSdMmpYay5r2Ax0BzopQ"
              },
              "addMemoryImage": {
                "handler": "src/memories/handlers/addMemoryImage.addMemoryImageHandler",
                "events": [
                  {
                    "http": {
                      "path": "memories/{userId}/{memoryId}/image",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-addMemoryImage",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/addMemoryImage.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "AddMemoryImageLambdaVersionPW0sPbjahY4Y8rFnu9nPKvbGtaX6yn3y36j2YJ4UhY"
              },
              "streamMemoryUpdates": {
                "handler": "src/memories/handlers/streamMemoryUpdates.streamMemoryUpdatesHandler",
                "events": [
                  {
                    "stream": {
                      "type": "dynamodb",
                      "arn": {
                        "Fn::GetAtt": [
                          "Memories",
                          "StreamArn"
                        ]
                      }
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-streamMemoryUpdates",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/streamMemoryUpdates.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "StreamMemoryUpdatesLambdaVersionCoVwkP6CDRNY7yUorfgX1gwze9UlaA4Xt2nbv0XtYM"
              },
              "storeListeningHistory": {
                "handler": "src/listeningHistory/handlers/storeListeningHistory.handler",
                "events": [
                  {
                    "http": {
                      "path": "listening-history/store",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-storeListeningHistory",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/storeListeningHistory.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "StoreListeningHistoryLambdaVersionjRDsLKzynq5NwvfXsBUZkaMTi2L3TDcvA1CuHLzv70"
              },
              "getListeningHistoryByLocation": {
                "handler": "src/listeningHistory/handlers/getListeningHistoryByLocation.handler",
                "events": [
                  {
                    "http": {
                      "path": "listening-history/{lat}/{lon}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "request": {
                        "parameters": {
                          "method.request.querystring.radius": false,
                          "method.request.path.lat": true,
                          "method.request.path.lon": true
                        }
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-getListeningHistoryByLocation",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getListeningHistoryByLocation.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetListeningHistoryByLocationLambdaVersionD21EfbEJr1U6Ndgg368pPNmHbTe1cjvekAZbQkf0A"
              },
              "suggestSongsByLocation": {
                "handler": "src/musicSuggestions/handlers/suggestSongsByLocation.handler",
                "events": [
                  {
                    "http": {
                      "path": "users/{userId}/suggestions/location",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "request": {
                        "parameters": {
                          "method.request.querystring.lat": true,
                          "method.request.querystring.lon": true,
                          "method.request.querystring.radius": false
                        }
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-suggestSongsByLocation",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/suggestSongsByLocation.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "SuggestSongsByLocationLambdaVersionIXpiMKsTZHkQGzKkq4poCvhMRPUynNcJ0uUyfJNXms"
              },
              "getRecentTracks": {
                "handler": "src/spotify/tracks/handlers/getRecentTracks.getRecentTracksHandler",
                "events": [
                  {
                    "http": {
                      "path": "users/{userId}/spotify/recent-tracks",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-getRecentTracks",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getRecentTracks.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetRecentTracksLambdaVersionhTHgheDMEeJsVFGrG4PgMB3QMbVyUVr8CvQT2NVkeE"
              },
              "getTopTracks": {
                "handler": "src/spotify/tracks/handlers/getTopTracks.getTopTracksHandler",
                "events": [
                  {
                    "http": {
                      "path": "users/{userId}/spotify/top-tracks",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-getTopTracks",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getTopTracks.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetTopTracksLambdaVersionQBH4mZXSDLhy2NqJPje1lq15sJnv9DKSarYIfRvHDU"
              },
              "getTopArtists": {
                "handler": "src/spotify/tracks/handlers/getTopArtists.getTopArtistsHandler",
                "events": [
                  {
                    "http": {
                      "path": "users/{userId}/spotify/top-artists",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-getTopArtists",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getTopArtists.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetTopArtistsLambdaVersionwolLGNVMJo6bXl4UfiReP3KUnhERyZqi4l0VxTiYKI"
              },
              "getCurrentlyPlayingTrack": {
                "handler": "src/spotify/tracks/handlers/getCurrentlyPlayingTrack.getCurrentlyPlayingTrackHandler",
                "events": [
                  {
                    "http": {
                      "path": "users/{userId}/spotify/currently-playing",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "request": {
                        "parameters": {
                          "method.request.path.userId": true
                        }
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-getCurrentlyPlayingTrack",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getCurrentlyPlayingTrack.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetCurrentlyPlayingTrackLambdaVersionSALxifadhMxfPVF5lWCOdBGPHv64I3ETFPuwdD1MU"
              },
              "createPlaylist": {
                "handler": "src/spotify/playlists/handlers/createPlaylist.createPlaylistHandler",
                "events": [
                  {
                    "http": {
                      "path": "playlists/{userId}",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "request": {
                        "parameters": {
                          "method.request.path.userId": true
                        }
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-createPlaylist",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/createPlaylist.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "CreatePlaylistLambdaVersionBp6me3UEkA9FXDqSdIVap7bIHYOIZ512TBuTkQCcI"
              },
              "addTrackToPlaylist": {
                "handler": "src/spotify/playlists/handlers/addTrackToPlaylist.addTrackToPlaylistHandler",
                "events": [
                  {
                    "http": {
                      "path": "playlists/{userId}/{playlistId}/tracks",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "request": {
                        "parameters": {
                          "method.request.path.userId": true,
                          "method.request.path.playlistId": true
                        }
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-addTrackToPlaylist",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/addTrackToPlaylist.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "AddTrackToPlaylistLambdaVersionXBkTBIvIOwQJvR8ct5mWMlIdrWTrULDy42lfQ81SQU"
              },
              "removeTrackFromPlaylist": {
                "handler": "src/spotify/playlists/handlers/removeTrackFromPlaylist.removeTrackFromPlaylistHandler",
                "events": [
                  {
                    "http": {
                      "path": "playlists/{userId}/{playlistId}/tracks",
                      "method": "delete",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "request": {
                        "parameters": {
                          "method.request.path.userId": true,
                          "method.request.path.playlistId": true
                        }
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-removeTrackFromPlaylist",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/removeTrackFromPlaylist.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "RemoveTrackFromPlaylistLambdaVersionjRi7ZqmWp0WD1Jb9esFmn1VufvLqETYHATFM8byuh4U"
              },
              "getPlaylistDetails": {
                "handler": "src/spotify/playlists/handlers/getPlaylistDetails.getPlaylistDetailsHandler",
                "events": [
                  {
                    "http": {
                      "path": "playlists/{userId}/{playlistId}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "request": {
                        "parameters": {
                          "method.request.path.userId": true,
                          "method.request.path.playlistId": true
                        }
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-getPlaylistDetails",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getPlaylistDetails.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetPlaylistDetailsLambdaVersion9UemFCBbDWYSLPNt8H1mkFnut51CZvUe9ZdHPL3yQ"
              },
              "deletePlaylist": {
                "handler": "src/spotify/playlists/handlers/deletePlaylist.deletePlaylistHandler",
                "events": [
                  {
                    "http": {
                      "path": "playlists/{userId}/{playlistId}",
                      "method": "delete",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-deletePlaylist",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/deletePlaylist.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "DeletePlaylistLambdaVersionrWbClJ7NiaNk1jo7Dv4yqu530EhMYZxugnxspnO0U"
              },
              "setPlaylistImage": {
                "handler": "src/spotify/playlists/handlers/setPlaylistImage.setPlaylistImageHandler",
                "events": [
                  {
                    "http": {
                      "path": "playlists/{userId}/{playlistId}/image",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-setPlaylistImage",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/setPlaylistImage.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "SetPlaylistImageLambdaVersionRpesbiItoRavEjIARF0t4rGaEMR6HNmLztW1J8gimk"
              },
              "reverseGeocode": {
                "handler": "src/locations/handlers/reverseGeocode.reverseGeocodeHandler",
                "events": [
                  {
                    "http": {
                      "path": "reverseGeocode",
                      "method": "get",
                      "request": {
                        "parameters": {
                          "method.request.querystring.latitude": true,
                          "method.request.querystring.longitude": true
                        }
                      },
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-reverseGeocode",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/reverseGeocode.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "ReverseGeocodeLambdaVersionMNRpCoGfcKG6cQo56dUjibMnzukcGO43H64Z2zKPLM"
              }
            },
            "resources": {
              "Resources": {
                "AuthSessionData": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "AuthSessionData",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "UserId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "UserId",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST",
                    "TimeToLiveSpecification": {
                      "AttributeName": "ExpiresAt",
                      "Enabled": true
                    }
                  }
                },
                "UsersTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "Users",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "UserId",
                        "AttributeType": "S"
                      },
                      {
                        "AttributeName": "SpotifyUserId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "UserId",
                        "KeyType": "HASH"
                      }
                    ],
                    "GlobalSecondaryIndexes": [
                      {
                        "IndexName": "SpotifyUserIdIndex",
                        "KeySchema": [
                          {
                            "AttributeName": "SpotifyUserId",
                            "KeyType": "HASH"
                          }
                        ],
                        "Projection": {
                          "ProjectionType": "ALL"
                        }
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST",
                    "StreamSpecification": {
                      "StreamViewType": "NEW_AND_OLD_IMAGES"
                    }
                  }
                },
                "Memories": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "Memories",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "memoryId",
                        "AttributeType": "S"
                      },
                      {
                        "AttributeName": "city",
                        "AttributeType": "S"
                      },
                      {
                        "AttributeName": "userId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "memoryId",
                        "KeyType": "HASH"
                      }
                    ],
                    "GlobalSecondaryIndexes": [
                      {
                        "IndexName": "CityUserIndex",
                        "KeySchema": [
                          {
                            "AttributeName": "userId",
                            "KeyType": "HASH"
                          },
                          {
                            "AttributeName": "city",
                            "KeyType": "RANGE"
                          }
                        ],
                        "Projection": {
                          "ProjectionType": "ALL"
                        }
                      },
                      {
                        "IndexName": "UserMemoryIndex",
                        "KeySchema": [
                          {
                            "AttributeName": "userId",
                            "KeyType": "HASH"
                          }
                        ],
                        "Projection": {
                          "ProjectionType": "ALL"
                        }
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST",
                    "StreamSpecification": {
                      "StreamViewType": "NEW_AND_OLD_IMAGES"
                    }
                  }
                },
                "ListeningHistoryTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "ListeningHistoryTable",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "geohash",
                        "AttributeType": "S"
                      },
                      {
                        "AttributeName": "timestamp",
                        "AttributeType": "N"
                      },
                      {
                        "AttributeName": "trackId",
                        "AttributeType": "S"
                      },
                      {
                        "AttributeName": "userId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "geohash",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "timestamp",
                        "KeyType": "RANGE"
                      }
                    ],
                    "GlobalSecondaryIndexes": [
                      {
                        "IndexName": "TrackIdIndex",
                        "KeySchema": [
                          {
                            "AttributeName": "trackId",
                            "KeyType": "HASH"
                          },
                          {
                            "AttributeName": "timestamp",
                            "KeyType": "RANGE"
                          }
                        ],
                        "Projection": {
                          "ProjectionType": "ALL"
                        }
                      },
                      {
                        "IndexName": "UserIdIndex",
                        "KeySchema": [
                          {
                            "AttributeName": "userId",
                            "KeyType": "HASH"
                          },
                          {
                            "AttributeName": "timestamp",
                            "KeyType": "RANGE"
                          }
                        ],
                        "Projection": {
                          "ProjectionType": "ALL"
                        }
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST",
                    "StreamSpecification": {
                      "StreamViewType": "NEW_AND_OLD_IMAGES"
                    }
                  }
                },
                "MusicSuggestionsTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "MusicSuggestionsTable",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "locationId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "locationId",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST",
                    "StreamSpecification": {
                      "StreamViewType": "NEW_AND_OLD_IMAGES"
                    }
                  }
                }
              },
              "Outputs": {}
            }
          },
          "configFileDirPath": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server",
          "config": {
            "type": "env"
          },
          "options": {
            "aws-profile": "nostalgio"
          },
          "stage": "dev",
          "dashboard": null,
          "logger": {
            "namespace": "s:core:resolver:env",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      },
      "self": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "org": "andresgrc",
            "app": "nostalgio-backend",
            "service": "nostalgio-backend",
            "provider": {
              "name": "aws",
              "runtime": "nodejs18.x",
              "region": "us-east-1",
              "environment": {
                "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                "GOOGLE_API_KEY": "<REDACTED>",
                "USERS_TABLE": "Users",
                "MEMORIES_TABLE": "Memories",
                "AUTH_SESSION_TABLE": "AuthSessionData",
                "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
              },
              "iamRoleStatements": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-idp:AdminCreateUser",
                    "cognito-idp:AdminUpdateUserAttributes",
                    "cognito-idp:AdminInitiateAuth",
                    "cognito-idp:AdminRespondToAuthChallenge",
                    "cognito-idp:ListUsers",
                    "cognito-idp:AdminGetUser",
                    "cognito-idp:AdminDeleteUser"
                  ],
                  "Resource": "arn:aws:cognito-idp:us-east-1:*:userpool/us-east-1_lqzsgfHQr"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:PutItem",
                    "dynamodb:GetItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:DescribeStream",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UsersTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "UsersTable",
                        "StreamArn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "Memories",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "Memories",
                        "StreamArn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "AuthSessionData",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "ListeningHistoryTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "ListeningHistoryTable",
                        "StreamArn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "MusicSuggestionsTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "MusicSuggestionsTable",
                        "StreamArn"
                      ]
                    },
                    "arn:aws:dynamodb:us-east-1:*:table/Users/index/SpotifyUserIdIndex",
                    "arn:aws:dynamodb:us-east-1:*:table/Memories/index/CityUserIndex",
                    "arn:aws:dynamodb:us-east-1:*:table/Memories/index/UserMemoryIndex",
                    "arn:aws:dynamodb:us-east-1:*:table/ListeningHistoryTable/index/TrackIdIndex",
                    "arn:aws:dynamodb:us-east-1:*:table/ListeningHistoryTable/index/UserIdIndex"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ],
              "stage": "dev",
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "SpotifyAuthLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-spotifyAuth"
                    }
                  },
                  "SpotifyCallbackLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-spotifyCallback"
                    }
                  },
                  "ExchangeSpotifyTokenLogGroup": "<REDACTED>",
                  "RefreshSpotifyTokenLogGroup": "<REDACTED>",
                  "ValidateSpotifyTokenLogGroup": "<REDACTED>",
                  "CreateUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-createUser"
                    }
                  },
                  "GetUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getUser"
                    }
                  },
                  "UpdateUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-updateUser"
                    }
                  },
                  "DeleteUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-deleteUser"
                    }
                  },
                  "CreateMemoryLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-createMemory"
                    }
                  },
                  "GetMemoryLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getMemory"
                    }
                  },
                  "UpdateMemoryLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-updateMemory"
                    }
                  },
                  "DeleteMemoryLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-deleteMemory"
                    }
                  },
                  "ListMemoriesLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-listMemories"
                    }
                  },
                  "GetCityMemoriesLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getCityMemories"
                    }
                  },
                  "AddMemoryImageLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-addMemoryImage"
                    }
                  },
                  "StreamMemoryUpdatesLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-streamMemoryUpdates"
                    }
                  },
                  "StoreListeningHistoryLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-storeListeningHistory"
                    }
                  },
                  "GetListeningHistoryByLocationLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getListeningHistoryByLocation"
                    }
                  },
                  "SuggestSongsByLocationLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-suggestSongsByLocation"
                    }
                  },
                  "GetRecentTracksLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getRecentTracks"
                    }
                  },
                  "GetTopTracksLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getTopTracks"
                    }
                  },
                  "GetTopArtistsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getTopArtists"
                    }
                  },
                  "GetCurrentlyPlayingTrackLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getCurrentlyPlayingTrack"
                    }
                  },
                  "CreatePlaylistLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-createPlaylist"
                    }
                  },
                  "AddTrackToPlaylistLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-addTrackToPlaylist"
                    }
                  },
                  "RemoveTrackFromPlaylistLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-removeTrackFromPlaylist"
                    }
                  },
                  "GetPlaylistDetailsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getPlaylistDetails"
                    }
                  },
                  "DeletePlaylistLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-deletePlaylist"
                    }
                  },
                  "SetPlaylistImageLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-setPlaylistImage"
                    }
                  },
                  "ReverseGeocodeLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/nostalgio-backend-dev-reverseGeocode"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "nostalgio-backend",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/nostalgio-backend-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/nostalgio-backend-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "cognito-idp:AdminCreateUser",
                                  "cognito-idp:AdminUpdateUserAttributes",
                                  "cognito-idp:AdminInitiateAuth",
                                  "cognito-idp:AdminRespondToAuthChallenge",
                                  "cognito-idp:ListUsers",
                                  "cognito-idp:AdminGetUser",
                                  "cognito-idp:AdminDeleteUser"
                                ],
                                "Resource": "arn:aws:cognito-idp:us-east-1:*:userpool/us-east-1_lqzsgfHQr"
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "lambda:InvokeFunction"
                                ],
                                "Resource": "*"
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:Query",
                                  "dynamodb:PutItem",
                                  "dynamodb:GetItem",
                                  "dynamodb:UpdateItem",
                                  "dynamodb:DeleteItem",
                                  "dynamodb:DescribeStream",
                                  "dynamodb:GetRecords",
                                  "dynamodb:GetShardIterator"
                                ],
                                "Resource": [
                                  {
                                    "Fn::GetAtt": [
                                      "UsersTable",
                                      "Arn"
                                    ]
                                  },
                                  {
                                    "Fn::GetAtt": [
                                      "UsersTable",
                                      "StreamArn"
                                    ]
                                  },
                                  {
                                    "Fn::GetAtt": [
                                      "Memories",
                                      "Arn"
                                    ]
                                  },
                                  {
                                    "Fn::GetAtt": [
                                      "Memories",
                                      "StreamArn"
                                    ]
                                  },
                                  {
                                    "Fn::GetAtt": [
                                      "AuthSessionData",
                                      "Arn"
                                    ]
                                  },
                                  {
                                    "Fn::GetAtt": [
                                      "ListeningHistoryTable",
                                      "Arn"
                                    ]
                                  },
                                  {
                                    "Fn::GetAtt": [
                                      "ListeningHistoryTable",
                                      "StreamArn"
                                    ]
                                  },
                                  {
                                    "Fn::GetAtt": [
                                      "MusicSuggestionsTable",
                                      "Arn"
                                    ]
                                  },
                                  {
                                    "Fn::GetAtt": [
                                      "MusicSuggestionsTable",
                                      "StreamArn"
                                    ]
                                  },
                                  "arn:aws:dynamodb:us-east-1:*:table/Users/index/SpotifyUserIdIndex",
                                  "arn:aws:dynamodb:us-east-1:*:table/Memories/index/CityUserIndex",
                                  "arn:aws:dynamodb:us-east-1:*:table/Memories/index/UserMemoryIndex",
                                  "arn:aws:dynamodb:us-east-1:*:table/ListeningHistoryTable/index/TrackIdIndex",
                                  "arn:aws:dynamodb:us-east-1:*:table/ListeningHistoryTable/index/UserIdIndex"
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogGroup",
                                  "logs:CreateLogStream",
                                  "logs:PutLogEvents"
                                ],
                                "Resource": "*"
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:GetRecords",
                                  "dynamodb:GetShardIterator",
                                  "dynamodb:DescribeStream",
                                  "dynamodb:ListStreams"
                                ],
                                "Resource": [
                                  {
                                    "Fn::GetAtt": [
                                      "Memories",
                                      "StreamArn"
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "nostalgio-backend",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "SpotifyAuthLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/spotifyAuth.zip"
                      },
                      "Handler": "src/auth/spotify/spotifyAuthHandler.spotifyAuthHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-spotifyAuth",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "SpotifyAuthLogGroup"
                    ]
                  },
                  "SpotifyCallbackLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/spotifyCallback.zip"
                      },
                      "Handler": "src/auth/spotify/spotifyCallbackHandler.spotifyCallbackHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-spotifyCallback",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "SpotifyCallbackLogGroup"
                    ]
                  },
                  "ExchangeSpotifyTokenLambdaFunction": "<REDACTED>",
                  "RefreshSpotifyTokenLambdaFunction": "<REDACTED>",
                  "ValidateSpotifyTokenLambdaFunction": "<REDACTED>",
                  "CreateUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/createUser.zip"
                      },
                      "Handler": "src/users/handlers/createUser.createUserHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-createUser",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateUserLogGroup"
                    ]
                  },
                  "GetUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getUser.zip"
                      },
                      "Handler": "src/users/handlers/getUser.getUserHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-getUser",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetUserLogGroup"
                    ]
                  },
                  "UpdateUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/updateUser.zip"
                      },
                      "Handler": "src/users/handlers/updateUser.updateUserHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-updateUser",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdateUserLogGroup"
                    ]
                  },
                  "DeleteUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/deleteUser.zip"
                      },
                      "Handler": "src/users/handlers/deleteUser.deleteUserHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-deleteUser",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteUserLogGroup"
                    ]
                  },
                  "CreateMemoryLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/createMemory.zip"
                      },
                      "Handler": "src/memories/handlers/createMemory.createMemoryHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-createMemory",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateMemoryLogGroup"
                    ]
                  },
                  "GetMemoryLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getMemory.zip"
                      },
                      "Handler": "src/memories/handlers/getMemory.getMemoryHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-getMemory",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetMemoryLogGroup"
                    ]
                  },
                  "UpdateMemoryLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/updateMemory.zip"
                      },
                      "Handler": "src/memories/handlers/updateMemory.updateMemoryHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-updateMemory",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdateMemoryLogGroup"
                    ]
                  },
                  "DeleteMemoryLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/deleteMemory.zip"
                      },
                      "Handler": "src/memories/handlers/deleteMemory.deleteMemoryHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-deleteMemory",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteMemoryLogGroup"
                    ]
                  },
                  "ListMemoriesLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/listMemories.zip"
                      },
                      "Handler": "src/memories/handlers/listMemories.listMemoriesHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-listMemories",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ListMemoriesLogGroup"
                    ]
                  },
                  "GetCityMemoriesLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getCityMemories.zip"
                      },
                      "Handler": "src/memories/handlers/getCityMemories.getCityMemoriesHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-getCityMemories",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetCityMemoriesLogGroup"
                    ]
                  },
                  "AddMemoryImageLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/addMemoryImage.zip"
                      },
                      "Handler": "src/memories/handlers/addMemoryImage.addMemoryImageHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-addMemoryImage",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "AddMemoryImageLogGroup"
                    ]
                  },
                  "StreamMemoryUpdatesLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/streamMemoryUpdates.zip"
                      },
                      "Handler": "src/memories/handlers/streamMemoryUpdates.streamMemoryUpdatesHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-streamMemoryUpdates",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "StreamMemoryUpdatesLogGroup"
                    ]
                  },
                  "StoreListeningHistoryLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/storeListeningHistory.zip"
                      },
                      "Handler": "src/listeningHistory/handlers/storeListeningHistory.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-storeListeningHistory",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "StoreListeningHistoryLogGroup"
                    ]
                  },
                  "GetListeningHistoryByLocationLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getListeningHistoryByLocation.zip"
                      },
                      "Handler": "src/listeningHistory/handlers/getListeningHistoryByLocation.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-getListeningHistoryByLocation",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetListeningHistoryByLocationLogGroup"
                    ]
                  },
                  "SuggestSongsByLocationLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/suggestSongsByLocation.zip"
                      },
                      "Handler": "src/musicSuggestions/handlers/suggestSongsByLocation.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-suggestSongsByLocation",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "SuggestSongsByLocationLogGroup"
                    ]
                  },
                  "GetRecentTracksLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getRecentTracks.zip"
                      },
                      "Handler": "src/spotify/tracks/handlers/getRecentTracks.getRecentTracksHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-getRecentTracks",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetRecentTracksLogGroup"
                    ]
                  },
                  "GetTopTracksLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getTopTracks.zip"
                      },
                      "Handler": "src/spotify/tracks/handlers/getTopTracks.getTopTracksHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-getTopTracks",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetTopTracksLogGroup"
                    ]
                  },
                  "GetTopArtistsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getTopArtists.zip"
                      },
                      "Handler": "src/spotify/tracks/handlers/getTopArtists.getTopArtistsHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-getTopArtists",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetTopArtistsLogGroup"
                    ]
                  },
                  "GetCurrentlyPlayingTrackLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getCurrentlyPlayingTrack.zip"
                      },
                      "Handler": "src/spotify/tracks/handlers/getCurrentlyPlayingTrack.getCurrentlyPlayingTrackHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-getCurrentlyPlayingTrack",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetCurrentlyPlayingTrackLogGroup"
                    ]
                  },
                  "CreatePlaylistLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/createPlaylist.zip"
                      },
                      "Handler": "src/spotify/playlists/handlers/createPlaylist.createPlaylistHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-createPlaylist",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreatePlaylistLogGroup"
                    ]
                  },
                  "AddTrackToPlaylistLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/addTrackToPlaylist.zip"
                      },
                      "Handler": "src/spotify/playlists/handlers/addTrackToPlaylist.addTrackToPlaylistHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-addTrackToPlaylist",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "AddTrackToPlaylistLogGroup"
                    ]
                  },
                  "RemoveTrackFromPlaylistLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/removeTrackFromPlaylist.zip"
                      },
                      "Handler": "src/spotify/playlists/handlers/removeTrackFromPlaylist.removeTrackFromPlaylistHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-removeTrackFromPlaylist",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "RemoveTrackFromPlaylistLogGroup"
                    ]
                  },
                  "GetPlaylistDetailsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getPlaylistDetails.zip"
                      },
                      "Handler": "src/spotify/playlists/handlers/getPlaylistDetails.getPlaylistDetailsHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-getPlaylistDetails",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetPlaylistDetailsLogGroup"
                    ]
                  },
                  "DeletePlaylistLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/deletePlaylist.zip"
                      },
                      "Handler": "src/spotify/playlists/handlers/deletePlaylist.deletePlaylistHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-deletePlaylist",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeletePlaylistLogGroup"
                    ]
                  },
                  "SetPlaylistImageLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/setPlaylistImage.zip"
                      },
                      "Handler": "src/spotify/playlists/handlers/setPlaylistImage.setPlaylistImageHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-setPlaylistImage",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "SetPlaylistImageLogGroup"
                    ]
                  },
                  "ReverseGeocodeLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                        "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/reverseGeocode.zip"
                      },
                      "Handler": "src/locations/handlers/reverseGeocode.reverseGeocodeHandler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "nostalgio-backend-dev-reverseGeocode",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                          "GOOGLE_API_KEY": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEMORIES_TABLE": "Memories",
                          "AUTH_SESSION_TABLE": "AuthSessionData",
                          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ReverseGeocodeLogGroup"
                    ]
                  },
                  "SpotifyAuthLambdaVersionJbR8Cp3sua5TftesoXh50qapDR3qfCGKlq4UyZJkmOY": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "SpotifyAuthLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "RefreshSpotifyTokenLambdaVersionGodXQfdYONmaVkETjzJcs2mIhWV6WDn5wxmPVBIz0": "<REDACTED>",
                  "ExchangeSpotifyTokenLambdaVersionE1uewPFe3tljbfAvZkLwr0srO1NaKHpdYbJqLvktVY": "<REDACTED>",
                  "SpotifyCallbackLambdaVersionzvT3hECX4Fa89pCv14JCDIevLI2WJYlGGcmcwLwiPqY": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "SpotifyCallbackLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "UpdateUserLambdaVersion3oz9SvHtAenKQY5GyjUifdzkRHn6KdPq7yc73iJf3xE": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateUserLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "CreateUserLambdaVersionkg1G5WcMhKigmzuzRf85uFIXEyAHQmIShiNYZ35zd4I": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateUserLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "GetUserLambdaVersion7yXclQ6G00RaNbY0oj4FxgRHVlOJmaVRE3Ory6wksY": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetUserLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "CreateMemoryLambdaVersionxikP1oC4J8DvK5qo1YmawnQSgFGC5eVyt6PrlKdwlrY": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateMemoryLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "UpdateMemoryLambdaVersionZT9mAaN3L4vOvxL12Mn3OaMgESgDEfSoQ1VUlfWHGs": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateMemoryLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "DeleteUserLambdaVersionTbLvqe25V1RjXsclZqB6JpjPugEWqZgZaIRFz7hlu2w": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteUserLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "DeleteMemoryLambdaVersionwuu45y6L5uMFsiZEq2Ci0IQfT9blmRitOZ7Xg4Ow": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteMemoryLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "ValidateSpotifyTokenLambdaVersionin1pt91wmdxWLNSm6SFEQkbhy5xqWofhrFGgfqDavmY": "<REDACTED>",
                  "AddMemoryImageLambdaVersionPW0sPbjahY4Y8rFnu9nPKvbGtaX6yn3y36j2YJ4UhY": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "AddMemoryImageLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "GetMemoryLambdaVersions1eZSLNBSc3RPtefH7eaLEU94Ag8hfOtHtjAyu5EQ": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetMemoryLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "ListMemoriesLambdaVersion4cl9DrJTrpSVo28ylNREv8nGBPyJkFiFBUWoKqs": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ListMemoriesLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "GetCityMemoriesLambdaVersion71dPDd3NUkNVE88VGCTlSdMmpYay5r2Ax0BzopQ": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetCityMemoriesLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "SuggestSongsByLocationLambdaVersionIXpiMKsTZHkQGzKkq4poCvhMRPUynNcJ0uUyfJNXms": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "SuggestSongsByLocationLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "GetCurrentlyPlayingTrackLambdaVersionSALxifadhMxfPVF5lWCOdBGPHv64I3ETFPuwdD1MU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetCurrentlyPlayingTrackLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "StoreListeningHistoryLambdaVersionjRDsLKzynq5NwvfXsBUZkaMTi2L3TDcvA1CuHLzv70": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "StoreListeningHistoryLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "StreamMemoryUpdatesLambdaVersionCoVwkP6CDRNY7yUorfgX1gwze9UlaA4Xt2nbv0XtYM": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "StreamMemoryUpdatesLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "RemoveTrackFromPlaylistLambdaVersionjRi7ZqmWp0WD1Jb9esFmn1VufvLqETYHATFM8byuh4U": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "RemoveTrackFromPlaylistLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "GetListeningHistoryByLocationLambdaVersionD21EfbEJr1U6Ndgg368pPNmHbTe1cjvekAZbQkf0A": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetListeningHistoryByLocationLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "GetTopArtistsLambdaVersionwolLGNVMJo6bXl4UfiReP3KUnhERyZqi4l0VxTiYKI": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetTopArtistsLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "CreatePlaylistLambdaVersionBp6me3UEkA9FXDqSdIVap7bIHYOIZ512TBuTkQCcI": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreatePlaylistLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "GetRecentTracksLambdaVersionhTHgheDMEeJsVFGrG4PgMB3QMbVyUVr8CvQT2NVkeE": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetRecentTracksLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "GetTopTracksLambdaVersionQBH4mZXSDLhy2NqJPje1lq15sJnv9DKSarYIfRvHDU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetTopTracksLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "AddTrackToPlaylistLambdaVersionXBkTBIvIOwQJvR8ct5mWMlIdrWTrULDy42lfQ81SQU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "AddTrackToPlaylistLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "GetPlaylistDetailsLambdaVersion9UemFCBbDWYSLPNt8H1mkFnut51CZvUe9ZdHPL3yQ": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetPlaylistDetailsLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "DeletePlaylistLambdaVersionrWbClJ7NiaNk1jo7Dv4yqu530EhMYZxugnxspnO0U": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeletePlaylistLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "SetPlaylistImageLambdaVersionRpesbiItoRavEjIARF0t4rGaEMR6HNmLztW1J8gimk": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "SetPlaylistImageLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "ReverseGeocodeLambdaVersionMNRpCoGfcKG6cQo56dUjibMnzukcGO43H64Z2zKPLM": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ReverseGeocodeLambdaFunction"
                      },
                      "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-nostalgio-backend",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceAuth": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "auth",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceAuthLogin": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceAuth"
                      },
                      "PathPart": "login",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceCallback": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "callback",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceExchangespotifytoken": "<REDACTED>",
                  "ApiGatewayResourceRefreshspotifytoken": "<REDACTED>",
                  "ApiGatewayResourceValidatespotifytoken": "<REDACTED>",
                  "ApiGatewayResourceValidatespotifytokenUseridVar": "<REDACTED>",
                  "ApiGatewayResourceUsers": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "users",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersUseridVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsers"
                      },
                      "PathPart": "{userId}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersUseridVarSuggestions": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsersUseridVar"
                      },
                      "PathPart": "suggestions",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersUseridVarSuggestionsLocation": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSuggestions"
                      },
                      "PathPart": "location",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersUseridVarSpotify": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsersUseridVar"
                      },
                      "PathPart": "spotify",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersUseridVarSpotifyRecentDashtracks": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotify"
                      },
                      "PathPart": "recent-tracks",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersUseridVarSpotifyTopDashtracks": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotify"
                      },
                      "PathPart": "top-tracks",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersUseridVarSpotifyTopDashartists": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotify"
                      },
                      "PathPart": "top-artists",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersUseridVarSpotifyCurrentlyDashplaying": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotify"
                      },
                      "PathPart": "currently-playing",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersSpotify": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsers"
                      },
                      "PathPart": "spotify",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUsersSpotifySpotifyuseridVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUsersSpotify"
                      },
                      "PathPart": "{spotifyUserId}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMemories": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "memories",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMemoriesUseridVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceMemories"
                      },
                      "PathPart": "{userId}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMemoriesUseridVarMemoryidVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVar"
                      },
                      "PathPart": "{memoryId}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMemoriesUseridVarMemoryidVarImage": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVar"
                      },
                      "PathPart": "image",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMemoriesUseridVarCity": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVar"
                      },
                      "PathPart": "city",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMemoriesUseridVarCityCityVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarCity"
                      },
                      "PathPart": "{city}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceListeningDashhistory": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "listening-history",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceListeningDashhistoryStore": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceListeningDashhistory"
                      },
                      "PathPart": "store",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceListeningDashhistoryLatVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceListeningDashhistory"
                      },
                      "PathPart": "{lat}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceListeningDashhistoryLatVarLonVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceListeningDashhistoryLatVar"
                      },
                      "PathPart": "{lon}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePlaylists": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "playlists",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePlaylistsUseridVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourcePlaylists"
                      },
                      "PathPart": "{userId}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePlaylistsUseridVarPlaylistidVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVar"
                      },
                      "PathPart": "{playlistId}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarTracks": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVar"
                      },
                      "PathPart": "tracks",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarImage": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVar"
                      },
                      "PathPart": "image",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceReversegeocode": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "reverseGeocode",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodAuthLoginOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceAuthLogin"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodCallbackOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceCallback"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodExchangespotifytokenOptions": "<REDACTED>",
                  "ApiGatewayMethodRefreshspotifytokenOptions": "<REDACTED>",
                  "ApiGatewayMethodValidatespotifytokenUseridVarOptions": "<REDACTED>",
                  "ApiGatewayMethodUsersOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsers"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUsersUseridVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUsersSpotifySpotifyuseridVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersSpotifySpotifyuseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMemoriesOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemories"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMemoriesUseridVarMemoryidVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMemoriesUseridVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMemoriesUseridVarCityCityVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarCityCityVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMemoriesUseridVarMemoryidVarImageOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVarImage"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodListeningDashhistoryStoreOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceListeningDashhistoryStore"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodListeningDashhistoryLatVarLonVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceListeningDashhistoryLatVarLonVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUsersUseridVarSuggestionsLocationOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSuggestionsLocation"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUsersUseridVarSpotifyRecentDashtracksOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotifyRecentDashtracks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUsersUseridVarSpotifyTopDashtracksOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotifyTopDashtracks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUsersUseridVarSpotifyTopDashartistsOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotifyTopDashartists"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUsersUseridVarSpotifyCurrentlyDashplayingOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotifyCurrentlyDashplaying"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodPlaylistsUseridVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarTracksOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarTracks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarImageOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarImage"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodReversegeocodeOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceReversegeocode"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodAuthLoginGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceAuthLogin"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "SpotifyAuthLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "SpotifyAuthLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodCallbackGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceCallback"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "SpotifyCallbackLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "SpotifyCallbackLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodExchangespotifytokenPost": "<REDACTED>",
                  "ApiGatewayMethodRefreshspotifytokenPost": "<REDACTED>",
                  "ApiGatewayMethodValidatespotifytokenUseridVarPost": "<REDACTED>",
                  "ApiGatewayMethodUsersPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsers"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateUserLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreateUserLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUsersUseridVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetUserLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetUserLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUsersSpotifySpotifyuseridVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersSpotifySpotifyuseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetUserLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetUserLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUsersUseridVarPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdateUserLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "UpdateUserLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUsersUseridVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteUserLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteUserLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMemoriesPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemories"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateMemoryLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreateMemoryLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMemoriesUseridVarMemoryidVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetMemoryLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetMemoryLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMemoriesUseridVarMemoryidVarPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdateMemoryLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "UpdateMemoryLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMemoriesUseridVarMemoryidVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteMemoryLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteMemoryLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMemoriesUseridVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "ListMemoriesLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "ListMemoriesLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMemoriesUseridVarCityCityVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarCityCityVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetCityMemoriesLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetCityMemoriesLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMemoriesUseridVarMemoryidVarImagePut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVarImage"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AddMemoryImageLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "AddMemoryImageLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodListeningDashhistoryStorePost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceListeningDashhistoryStore"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "StoreListeningHistoryLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "StoreListeningHistoryLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodListeningDashhistoryLatVarLonVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {
                        "method.request.querystring.radius": false,
                        "method.request.path.lat": true,
                        "method.request.path.lon": true
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceListeningDashhistoryLatVarLonVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetListeningHistoryByLocationLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": [],
                      "RequestValidatorId": {
                        "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                      }
                    },
                    "DependsOn": [
                      "GetListeningHistoryByLocationLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUsersUseridVarSuggestionsLocationGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {
                        "method.request.querystring.lat": true,
                        "method.request.querystring.lon": true,
                        "method.request.querystring.radius": false
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSuggestionsLocation"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "SuggestSongsByLocationLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": [],
                      "RequestValidatorId": {
                        "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                      }
                    },
                    "DependsOn": [
                      "SuggestSongsByLocationLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUsersUseridVarSpotifyRecentDashtracksGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotifyRecentDashtracks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetRecentTracksLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetRecentTracksLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUsersUseridVarSpotifyTopDashtracksGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotifyTopDashtracks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetTopTracksLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetTopTracksLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUsersUseridVarSpotifyTopDashartistsGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotifyTopDashartists"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetTopArtistsLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetTopArtistsLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUsersUseridVarSpotifyCurrentlyDashplayingGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {
                        "method.request.path.userId": true
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUsersUseridVarSpotifyCurrentlyDashplaying"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetCurrentlyPlayingTrackLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": [],
                      "RequestValidatorId": {
                        "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                      }
                    },
                    "DependsOn": [
                      "GetCurrentlyPlayingTrackLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPlaylistsUseridVarPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {
                        "method.request.path.userId": true
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreatePlaylistLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": [],
                      "RequestValidatorId": {
                        "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                      }
                    },
                    "DependsOn": [
                      "CreatePlaylistLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarTracksPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {
                        "method.request.path.userId": true,
                        "method.request.path.playlistId": true
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarTracks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AddTrackToPlaylistLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": [],
                      "RequestValidatorId": {
                        "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                      }
                    },
                    "DependsOn": [
                      "AddTrackToPlaylistLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarTracksDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {
                        "method.request.path.userId": true,
                        "method.request.path.playlistId": true
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarTracks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "RemoveTrackFromPlaylistLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": [],
                      "RequestValidatorId": {
                        "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                      }
                    },
                    "DependsOn": [
                      "RemoveTrackFromPlaylistLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {
                        "method.request.path.userId": true,
                        "method.request.path.playlistId": true
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetPlaylistDetailsLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": [],
                      "RequestValidatorId": {
                        "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                      }
                    },
                    "DependsOn": [
                      "GetPlaylistDetailsLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeletePlaylistLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeletePlaylistLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarImagePut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarImage"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "SetPlaylistImageLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "SetPlaylistImageLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodReversegeocodeGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {
                        "method.request.querystring.latitude": true,
                        "method.request.querystring.longitude": true
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceReversegeocode"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "ReverseGeocodeLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": [],
                      "RequestValidatorId": {
                        "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                      }
                    },
                    "DependsOn": [
                      "ReverseGeocodeLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayNostalgiobackendRequestValidator": {
                    "Type": "AWS::ApiGateway::RequestValidator",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ValidateRequestBody": true,
                      "ValidateRequestParameters": true,
                      "Name": "nostalgio-backend-dev | Validate request body and querystring parameters"
                    }
                  },
                  "ApiGatewayDeployment1728528928183": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodAuthLoginOptions",
                      "ApiGatewayMethodCallbackOptions",
                      "ApiGatewayMethodExchangespotifytokenOptions",
                      "ApiGatewayMethodRefreshspotifytokenOptions",
                      "ApiGatewayMethodValidatespotifytokenUseridVarOptions",
                      "ApiGatewayMethodUsersOptions",
                      "ApiGatewayMethodUsersUseridVarOptions",
                      "ApiGatewayMethodUsersSpotifySpotifyuseridVarOptions",
                      "ApiGatewayMethodMemoriesOptions",
                      "ApiGatewayMethodMemoriesUseridVarMemoryidVarOptions",
                      "ApiGatewayMethodMemoriesUseridVarOptions",
                      "ApiGatewayMethodMemoriesUseridVarCityCityVarOptions",
                      "ApiGatewayMethodMemoriesUseridVarMemoryidVarImageOptions",
                      "ApiGatewayMethodListeningDashhistoryStoreOptions",
                      "ApiGatewayMethodListeningDashhistoryLatVarLonVarOptions",
                      "ApiGatewayMethodUsersUseridVarSuggestionsLocationOptions",
                      "ApiGatewayMethodUsersUseridVarSpotifyRecentDashtracksOptions",
                      "ApiGatewayMethodUsersUseridVarSpotifyTopDashtracksOptions",
                      "ApiGatewayMethodUsersUseridVarSpotifyTopDashartistsOptions",
                      "ApiGatewayMethodUsersUseridVarSpotifyCurrentlyDashplayingOptions",
                      "ApiGatewayMethodPlaylistsUseridVarOptions",
                      "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarTracksOptions",
                      "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarOptions",
                      "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarImageOptions",
                      "ApiGatewayMethodReversegeocodeOptions",
                      "ApiGatewayMethodAuthLoginGet",
                      "ApiGatewayMethodCallbackGet",
                      "ApiGatewayMethodExchangespotifytokenPost",
                      "ApiGatewayMethodRefreshspotifytokenPost",
                      "ApiGatewayMethodValidatespotifytokenUseridVarPost",
                      "ApiGatewayMethodUsersPost",
                      "ApiGatewayMethodUsersUseridVarGet",
                      "ApiGatewayMethodUsersSpotifySpotifyuseridVarGet",
                      "ApiGatewayMethodUsersUseridVarPut",
                      "ApiGatewayMethodUsersUseridVarDelete",
                      "ApiGatewayMethodMemoriesPost",
                      "ApiGatewayMethodMemoriesUseridVarMemoryidVarGet",
                      "ApiGatewayMethodMemoriesUseridVarMemoryidVarPut",
                      "ApiGatewayMethodMemoriesUseridVarMemoryidVarDelete",
                      "ApiGatewayMethodMemoriesUseridVarGet",
                      "ApiGatewayMethodMemoriesUseridVarCityCityVarGet",
                      "ApiGatewayMethodMemoriesUseridVarMemoryidVarImagePut",
                      "ApiGatewayMethodListeningDashhistoryStorePost",
                      "ApiGatewayMethodListeningDashhistoryLatVarLonVarGet",
                      "ApiGatewayMethodUsersUseridVarSuggestionsLocationGet",
                      "ApiGatewayMethodUsersUseridVarSpotifyRecentDashtracksGet",
                      "ApiGatewayMethodUsersUseridVarSpotifyTopDashtracksGet",
                      "ApiGatewayMethodUsersUseridVarSpotifyTopDashartistsGet",
                      "ApiGatewayMethodUsersUseridVarSpotifyCurrentlyDashplayingGet",
                      "ApiGatewayMethodPlaylistsUseridVarPost",
                      "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarTracksPost",
                      "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarTracksDelete",
                      "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarGet",
                      "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarDelete",
                      "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarImagePut",
                      "ApiGatewayMethodReversegeocodeGet"
                    ]
                  },
                  "SpotifyAuthLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "SpotifyAuthLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "SpotifyCallbackLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "SpotifyCallbackLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ExchangeSpotifyTokenLambdaPermissionApiGateway": "<REDACTED>",
                  "RefreshSpotifyTokenLambdaPermissionApiGateway": "<REDACTED>",
                  "ValidateSpotifyTokenLambdaPermissionApiGateway": "<REDACTED>",
                  "CreateUserLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetUserLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdateUserLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteUserLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateMemoryLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateMemoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetMemoryLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetMemoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdateMemoryLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateMemoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteMemoryLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteMemoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ListMemoriesLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ListMemoriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetCityMemoriesLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetCityMemoriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "AddMemoryImageLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "AddMemoryImageLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "StoreListeningHistoryLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "StoreListeningHistoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetListeningHistoryByLocationLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetListeningHistoryByLocationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "SuggestSongsByLocationLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "SuggestSongsByLocationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetRecentTracksLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetRecentTracksLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetTopTracksLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetTopTracksLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetTopArtistsLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetTopArtistsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetCurrentlyPlayingTrackLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetCurrentlyPlayingTrackLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "CreatePlaylistLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreatePlaylistLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "AddTrackToPlaylistLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "AddTrackToPlaylistLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "RemoveTrackFromPlaylistLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "RemoveTrackFromPlaylistLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetPlaylistDetailsLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetPlaylistDetailsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeletePlaylistLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeletePlaylistLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "SetPlaylistImageLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "SetPlaylistImageLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ReverseGeocodeLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ReverseGeocodeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "StreamMemoryUpdatesEventSourceMappingDynamodbMemories": {
                    "Type": "AWS::Lambda::EventSourceMapping",
                    "DependsOn": [
                      "IamRoleLambdaExecution"
                    ],
                    "Properties": {
                      "BatchSize": 10,
                      "Enabled": true,
                      "EventSourceArn": {
                        "Fn::GetAtt": [
                          "Memories",
                          "StreamArn"
                        ]
                      },
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "StreamMemoryUpdatesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "StartingPosition": "TRIM_HORIZON"
                    }
                  },
                  "AuthSessionData": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "AuthSessionData",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "UserId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "UserId",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST",
                      "TimeToLiveSpecification": {
                        "AttributeName": "ExpiresAt",
                        "Enabled": true
                      }
                    }
                  },
                  "UsersTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "Users",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "UserId",
                          "AttributeType": "S"
                        },
                        {
                          "AttributeName": "SpotifyUserId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "UserId",
                          "KeyType": "HASH"
                        }
                      ],
                      "GlobalSecondaryIndexes": [
                        {
                          "IndexName": "SpotifyUserIdIndex",
                          "KeySchema": [
                            {
                              "AttributeName": "SpotifyUserId",
                              "KeyType": "HASH"
                            }
                          ],
                          "Projection": {
                            "ProjectionType": "ALL"
                          }
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST",
                      "StreamSpecification": {
                        "StreamViewType": "NEW_AND_OLD_IMAGES"
                      }
                    }
                  },
                  "Memories": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "Memories",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "memoryId",
                          "AttributeType": "S"
                        },
                        {
                          "AttributeName": "city",
                          "AttributeType": "S"
                        },
                        {
                          "AttributeName": "userId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "memoryId",
                          "KeyType": "HASH"
                        }
                      ],
                      "GlobalSecondaryIndexes": [
                        {
                          "IndexName": "CityUserIndex",
                          "KeySchema": [
                            {
                              "AttributeName": "userId",
                              "KeyType": "HASH"
                            },
                            {
                              "AttributeName": "city",
                              "KeyType": "RANGE"
                            }
                          ],
                          "Projection": {
                            "ProjectionType": "ALL"
                          }
                        },
                        {
                          "IndexName": "UserMemoryIndex",
                          "KeySchema": [
                            {
                              "AttributeName": "userId",
                              "KeyType": "HASH"
                            }
                          ],
                          "Projection": {
                            "ProjectionType": "ALL"
                          }
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST",
                      "StreamSpecification": {
                        "StreamViewType": "NEW_AND_OLD_IMAGES"
                      }
                    }
                  },
                  "ListeningHistoryTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "ListeningHistoryTable",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "geohash",
                          "AttributeType": "S"
                        },
                        {
                          "AttributeName": "timestamp",
                          "AttributeType": "N"
                        },
                        {
                          "AttributeName": "trackId",
                          "AttributeType": "S"
                        },
                        {
                          "AttributeName": "userId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "geohash",
                          "KeyType": "HASH"
                        },
                        {
                          "AttributeName": "timestamp",
                          "KeyType": "RANGE"
                        }
                      ],
                      "GlobalSecondaryIndexes": [
                        {
                          "IndexName": "TrackIdIndex",
                          "KeySchema": [
                            {
                              "AttributeName": "trackId",
                              "KeyType": "HASH"
                            },
                            {
                              "AttributeName": "timestamp",
                              "KeyType": "RANGE"
                            }
                          ],
                          "Projection": {
                            "ProjectionType": "ALL"
                          }
                        },
                        {
                          "IndexName": "UserIdIndex",
                          "KeySchema": [
                            {
                              "AttributeName": "userId",
                              "KeyType": "HASH"
                            },
                            {
                              "AttributeName": "timestamp",
                              "KeyType": "RANGE"
                            }
                          ],
                          "Projection": {
                            "ProjectionType": "ALL"
                          }
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST",
                      "StreamSpecification": {
                        "StreamViewType": "NEW_AND_OLD_IMAGES"
                      }
                    }
                  },
                  "MusicSuggestionsTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "MusicSuggestionsTable",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "locationId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "locationId",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST",
                      "StreamSpecification": {
                        "StreamViewType": "NEW_AND_OLD_IMAGES"
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "SpotifyAuthLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "SpotifyAuthLambdaVersionJbR8Cp3sua5TftesoXh50qapDR3qfCGKlq4UyZJkmOY"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-SpotifyAuthLambdaFunctionQualifiedArn"
                    }
                  },
                  "RefreshSpotifyTokenLambdaFunctionQualifiedArn": "<REDACTED>",
                  "ExchangeSpotifyTokenLambdaFunctionQualifiedArn": "<REDACTED>",
                  "SpotifyCallbackLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "SpotifyCallbackLambdaVersionzvT3hECX4Fa89pCv14JCDIevLI2WJYlGGcmcwLwiPqY"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-SpotifyCallbackLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateUserLambdaVersion3oz9SvHtAenKQY5GyjUifdzkRHn6KdPq7yc73iJf3xE"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-UpdateUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateUserLambdaVersionkg1G5WcMhKigmzuzRf85uFIXEyAHQmIShiNYZ35zd4I"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-CreateUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetUserLambdaVersion7yXclQ6G00RaNbY0oj4FxgRHVlOJmaVRE3Ory6wksY"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-GetUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateMemoryLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateMemoryLambdaVersionxikP1oC4J8DvK5qo1YmawnQSgFGC5eVyt6PrlKdwlrY"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-CreateMemoryLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateMemoryLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateMemoryLambdaVersionZT9mAaN3L4vOvxL12Mn3OaMgESgDEfSoQ1VUlfWHGs"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-UpdateMemoryLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteUserLambdaVersionTbLvqe25V1RjXsclZqB6JpjPugEWqZgZaIRFz7hlu2w"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-DeleteUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteMemoryLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteMemoryLambdaVersionwuu45y6L5uMFsiZEq2Ci0IQfT9blmRitOZ7Xg4Ow"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-DeleteMemoryLambdaFunctionQualifiedArn"
                    }
                  },
                  "ValidateSpotifyTokenLambdaFunctionQualifiedArn": "<REDACTED>",
                  "AddMemoryImageLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "AddMemoryImageLambdaVersionPW0sPbjahY4Y8rFnu9nPKvbGtaX6yn3y36j2YJ4UhY"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-AddMemoryImageLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetMemoryLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetMemoryLambdaVersions1eZSLNBSc3RPtefH7eaLEU94Ag8hfOtHtjAyu5EQ"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-GetMemoryLambdaFunctionQualifiedArn"
                    }
                  },
                  "ListMemoriesLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ListMemoriesLambdaVersion4cl9DrJTrpSVo28ylNREv8nGBPyJkFiFBUWoKqs"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-ListMemoriesLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetCityMemoriesLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetCityMemoriesLambdaVersion71dPDd3NUkNVE88VGCTlSdMmpYay5r2Ax0BzopQ"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-GetCityMemoriesLambdaFunctionQualifiedArn"
                    }
                  },
                  "SuggestSongsByLocationLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "SuggestSongsByLocationLambdaVersionIXpiMKsTZHkQGzKkq4poCvhMRPUynNcJ0uUyfJNXms"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-SuggestSongsByLocationLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetCurrentlyPlayingTrackLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetCurrentlyPlayingTrackLambdaVersionSALxifadhMxfPVF5lWCOdBGPHv64I3ETFPuwdD1MU"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-GetCurrentlyPlayingTrackLambdaFunctionQualifiedArn"
                    }
                  },
                  "StoreListeningHistoryLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "StoreListeningHistoryLambdaVersionjRDsLKzynq5NwvfXsBUZkaMTi2L3TDcvA1CuHLzv70"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-StoreListeningHistoryLambdaFunctionQualifiedArn"
                    }
                  },
                  "StreamMemoryUpdatesLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "StreamMemoryUpdatesLambdaVersionCoVwkP6CDRNY7yUorfgX1gwze9UlaA4Xt2nbv0XtYM"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-StreamMemoryUpdatesLambdaFunctionQualifiedArn"
                    }
                  },
                  "RemoveTrackFromPlaylistLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "RemoveTrackFromPlaylistLambdaVersionjRi7ZqmWp0WD1Jb9esFmn1VufvLqETYHATFM8byuh4U"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-RemoveTrackFromPlaylistLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetListeningHistoryByLocationLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetListeningHistoryByLocationLambdaVersionD21EfbEJr1U6Ndgg368pPNmHbTe1cjvekAZbQkf0A"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-GetListeningHistoryByLocationLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetTopArtistsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetTopArtistsLambdaVersionwolLGNVMJo6bXl4UfiReP3KUnhERyZqi4l0VxTiYKI"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-GetTopArtistsLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreatePlaylistLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreatePlaylistLambdaVersionBp6me3UEkA9FXDqSdIVap7bIHYOIZ512TBuTkQCcI"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-CreatePlaylistLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetRecentTracksLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetRecentTracksLambdaVersionhTHgheDMEeJsVFGrG4PgMB3QMbVyUVr8CvQT2NVkeE"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-GetRecentTracksLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetTopTracksLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetTopTracksLambdaVersionQBH4mZXSDLhy2NqJPje1lq15sJnv9DKSarYIfRvHDU"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-GetTopTracksLambdaFunctionQualifiedArn"
                    }
                  },
                  "AddTrackToPlaylistLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "AddTrackToPlaylistLambdaVersionXBkTBIvIOwQJvR8ct5mWMlIdrWTrULDy42lfQ81SQU"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-AddTrackToPlaylistLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetPlaylistDetailsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetPlaylistDetailsLambdaVersion9UemFCBbDWYSLPNt8H1mkFnut51CZvUe9ZdHPL3yQ"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-GetPlaylistDetailsLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeletePlaylistLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeletePlaylistLambdaVersionrWbClJ7NiaNk1jo7Dv4yqu530EhMYZxugnxspnO0U"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-DeletePlaylistLambdaFunctionQualifiedArn"
                    }
                  },
                  "SetPlaylistImageLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "SetPlaylistImageLambdaVersionRpesbiItoRavEjIARF0t4rGaEMR6HNmLztW1J8gimk"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-SetPlaylistImageLambdaFunctionQualifiedArn"
                    }
                  },
                  "ReverseGeocodeLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ReverseGeocodeLambdaVersionMNRpCoGfcKG6cQo56dUjibMnzukcGO43H64Z2zKPLM"
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-ReverseGeocodeLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-nostalgio-backend-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "package": {
              "individually": true,
              "artifactsS3KeyDirname": "serverless/nostalgio-backend/dev/code-artifacts",
              "deploymentBucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
              "artifactDirectoryName": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z"
            },
            "plugins": [
              "serverless-offline"
            ],
            "functions": {
              "spotifyAuth": {
                "handler": "src/auth/spotify/spotifyAuthHandler.spotifyAuthHandler",
                "events": [
                  {
                    "http": {
                      "path": "auth/login",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-spotifyAuth",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/spotifyAuth.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "SpotifyAuthLambdaVersionJbR8Cp3sua5TftesoXh50qapDR3qfCGKlq4UyZJkmOY"
              },
              "spotifyCallback": {
                "handler": "src/auth/spotify/spotifyCallbackHandler.spotifyCallbackHandler",
                "events": [
                  {
                    "http": {
                      "path": "callback",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-spotifyCallback",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/spotifyCallback.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "SpotifyCallbackLambdaVersionzvT3hECX4Fa89pCv14JCDIevLI2WJYlGGcmcwLwiPqY"
              },
              "exchangeSpotifyToken": "<REDACTED>",
              "refreshSpotifyToken": "<REDACTED>",
              "validateSpotifyToken": "<REDACTED>",
              "createUser": {
                "handler": "src/users/handlers/createUser.createUserHandler",
                "events": [
                  {
                    "http": {
                      "path": "users",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-createUser",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/createUser.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "CreateUserLambdaVersionkg1G5WcMhKigmzuzRf85uFIXEyAHQmIShiNYZ35zd4I"
              },
              "getUser": {
                "handler": "src/users/handlers/getUser.getUserHandler",
                "events": [
                  {
                    "http": {
                      "path": "users/{userId}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  },
                  {
                    "http": {
                      "path": "users/spotify/{spotifyUserId}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-getUser",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getUser.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetUserLambdaVersion7yXclQ6G00RaNbY0oj4FxgRHVlOJmaVRE3Ory6wksY"
              },
              "updateUser": {
                "handler": "src/users/handlers/updateUser.updateUserHandler",
                "events": [
                  {
                    "http": {
                      "path": "users/{userId}",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-updateUser",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/updateUser.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "UpdateUserLambdaVersion3oz9SvHtAenKQY5GyjUifdzkRHn6KdPq7yc73iJf3xE"
              },
              "deleteUser": {
                "handler": "src/users/handlers/deleteUser.deleteUserHandler",
                "events": [
                  {
                    "http": {
                      "path": "users/{userId}",
                      "method": "delete",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-deleteUser",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/deleteUser.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "DeleteUserLambdaVersionTbLvqe25V1RjXsclZqB6JpjPugEWqZgZaIRFz7hlu2w"
              },
              "createMemory": {
                "handler": "src/memories/handlers/createMemory.createMemoryHandler",
                "events": [
                  {
                    "http": {
                      "path": "memories",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-createMemory",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/createMemory.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "CreateMemoryLambdaVersionxikP1oC4J8DvK5qo1YmawnQSgFGC5eVyt6PrlKdwlrY"
              },
              "getMemory": {
                "handler": "src/memories/handlers/getMemory.getMemoryHandler",
                "events": [
                  {
                    "http": {
                      "path": "memories/{userId}/{memoryId}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-getMemory",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getMemory.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetMemoryLambdaVersions1eZSLNBSc3RPtefH7eaLEU94Ag8hfOtHtjAyu5EQ"
              },
              "updateMemory": {
                "handler": "src/memories/handlers/updateMemory.updateMemoryHandler",
                "events": [
                  {
                    "http": {
                      "path": "memories/{userId}/{memoryId}",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-updateMemory",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/updateMemory.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "UpdateMemoryLambdaVersionZT9mAaN3L4vOvxL12Mn3OaMgESgDEfSoQ1VUlfWHGs"
              },
              "deleteMemory": {
                "handler": "src/memories/handlers/deleteMemory.deleteMemoryHandler",
                "events": [
                  {
                    "http": {
                      "path": "memories/{userId}/{memoryId}",
                      "method": "delete",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-deleteMemory",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/deleteMemory.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "DeleteMemoryLambdaVersionwuu45y6L5uMFsiZEq2Ci0IQfT9blmRitOZ7Xg4Ow"
              },
              "listMemories": {
                "handler": "src/memories/handlers/listMemories.listMemoriesHandler",
                "events": [
                  {
                    "http": {
                      "path": "memories/{userId}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-listMemories",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/listMemories.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "ListMemoriesLambdaVersion4cl9DrJTrpSVo28ylNREv8nGBPyJkFiFBUWoKqs"
              },
              "getCityMemories": {
                "handler": "src/memories/handlers/getCityMemories.getCityMemoriesHandler",
                "events": [
                  {
                    "http": {
                      "path": "memories/{userId}/city/{city}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-getCityMemories",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getCityMemories.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetCityMemoriesLambdaVersion71dPDd3NUkNVE88VGCTlSdMmpYay5r2Ax0BzopQ"
              },
              "addMemoryImage": {
                "handler": "src/memories/handlers/addMemoryImage.addMemoryImageHandler",
                "events": [
                  {
                    "http": {
                      "path": "memories/{userId}/{memoryId}/image",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-addMemoryImage",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/addMemoryImage.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "AddMemoryImageLambdaVersionPW0sPbjahY4Y8rFnu9nPKvbGtaX6yn3y36j2YJ4UhY"
              },
              "streamMemoryUpdates": {
                "handler": "src/memories/handlers/streamMemoryUpdates.streamMemoryUpdatesHandler",
                "events": [
                  {
                    "stream": {
                      "type": "dynamodb",
                      "arn": {
                        "Fn::GetAtt": [
                          "Memories",
                          "StreamArn"
                        ]
                      }
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-streamMemoryUpdates",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/streamMemoryUpdates.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "StreamMemoryUpdatesLambdaVersionCoVwkP6CDRNY7yUorfgX1gwze9UlaA4Xt2nbv0XtYM"
              },
              "storeListeningHistory": {
                "handler": "src/listeningHistory/handlers/storeListeningHistory.handler",
                "events": [
                  {
                    "http": {
                      "path": "listening-history/store",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-storeListeningHistory",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/storeListeningHistory.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "StoreListeningHistoryLambdaVersionjRDsLKzynq5NwvfXsBUZkaMTi2L3TDcvA1CuHLzv70"
              },
              "getListeningHistoryByLocation": {
                "handler": "src/listeningHistory/handlers/getListeningHistoryByLocation.handler",
                "events": [
                  {
                    "http": {
                      "path": "listening-history/{lat}/{lon}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "request": {
                        "parameters": {
                          "method.request.querystring.radius": false,
                          "method.request.path.lat": true,
                          "method.request.path.lon": true
                        }
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-getListeningHistoryByLocation",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getListeningHistoryByLocation.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetListeningHistoryByLocationLambdaVersionD21EfbEJr1U6Ndgg368pPNmHbTe1cjvekAZbQkf0A"
              },
              "suggestSongsByLocation": {
                "handler": "src/musicSuggestions/handlers/suggestSongsByLocation.handler",
                "events": [
                  {
                    "http": {
                      "path": "users/{userId}/suggestions/location",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "request": {
                        "parameters": {
                          "method.request.querystring.lat": true,
                          "method.request.querystring.lon": true,
                          "method.request.querystring.radius": false
                        }
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-suggestSongsByLocation",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/suggestSongsByLocation.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "SuggestSongsByLocationLambdaVersionIXpiMKsTZHkQGzKkq4poCvhMRPUynNcJ0uUyfJNXms"
              },
              "getRecentTracks": {
                "handler": "src/spotify/tracks/handlers/getRecentTracks.getRecentTracksHandler",
                "events": [
                  {
                    "http": {
                      "path": "users/{userId}/spotify/recent-tracks",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-getRecentTracks",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getRecentTracks.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetRecentTracksLambdaVersionhTHgheDMEeJsVFGrG4PgMB3QMbVyUVr8CvQT2NVkeE"
              },
              "getTopTracks": {
                "handler": "src/spotify/tracks/handlers/getTopTracks.getTopTracksHandler",
                "events": [
                  {
                    "http": {
                      "path": "users/{userId}/spotify/top-tracks",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-getTopTracks",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getTopTracks.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetTopTracksLambdaVersionQBH4mZXSDLhy2NqJPje1lq15sJnv9DKSarYIfRvHDU"
              },
              "getTopArtists": {
                "handler": "src/spotify/tracks/handlers/getTopArtists.getTopArtistsHandler",
                "events": [
                  {
                    "http": {
                      "path": "users/{userId}/spotify/top-artists",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-getTopArtists",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getTopArtists.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetTopArtistsLambdaVersionwolLGNVMJo6bXl4UfiReP3KUnhERyZqi4l0VxTiYKI"
              },
              "getCurrentlyPlayingTrack": {
                "handler": "src/spotify/tracks/handlers/getCurrentlyPlayingTrack.getCurrentlyPlayingTrackHandler",
                "events": [
                  {
                    "http": {
                      "path": "users/{userId}/spotify/currently-playing",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "request": {
                        "parameters": {
                          "method.request.path.userId": true
                        }
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-getCurrentlyPlayingTrack",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getCurrentlyPlayingTrack.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetCurrentlyPlayingTrackLambdaVersionSALxifadhMxfPVF5lWCOdBGPHv64I3ETFPuwdD1MU"
              },
              "createPlaylist": {
                "handler": "src/spotify/playlists/handlers/createPlaylist.createPlaylistHandler",
                "events": [
                  {
                    "http": {
                      "path": "playlists/{userId}",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "request": {
                        "parameters": {
                          "method.request.path.userId": true
                        }
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-createPlaylist",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/createPlaylist.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "CreatePlaylistLambdaVersionBp6me3UEkA9FXDqSdIVap7bIHYOIZ512TBuTkQCcI"
              },
              "addTrackToPlaylist": {
                "handler": "src/spotify/playlists/handlers/addTrackToPlaylist.addTrackToPlaylistHandler",
                "events": [
                  {
                    "http": {
                      "path": "playlists/{userId}/{playlistId}/tracks",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "request": {
                        "parameters": {
                          "method.request.path.userId": true,
                          "method.request.path.playlistId": true
                        }
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-addTrackToPlaylist",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/addTrackToPlaylist.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "AddTrackToPlaylistLambdaVersionXBkTBIvIOwQJvR8ct5mWMlIdrWTrULDy42lfQ81SQU"
              },
              "removeTrackFromPlaylist": {
                "handler": "src/spotify/playlists/handlers/removeTrackFromPlaylist.removeTrackFromPlaylistHandler",
                "events": [
                  {
                    "http": {
                      "path": "playlists/{userId}/{playlistId}/tracks",
                      "method": "delete",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "request": {
                        "parameters": {
                          "method.request.path.userId": true,
                          "method.request.path.playlistId": true
                        }
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-removeTrackFromPlaylist",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/removeTrackFromPlaylist.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "RemoveTrackFromPlaylistLambdaVersionjRi7ZqmWp0WD1Jb9esFmn1VufvLqETYHATFM8byuh4U"
              },
              "getPlaylistDetails": {
                "handler": "src/spotify/playlists/handlers/getPlaylistDetails.getPlaylistDetailsHandler",
                "events": [
                  {
                    "http": {
                      "path": "playlists/{userId}/{playlistId}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "request": {
                        "parameters": {
                          "method.request.path.userId": true,
                          "method.request.path.playlistId": true
                        }
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-getPlaylistDetails",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getPlaylistDetails.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetPlaylistDetailsLambdaVersion9UemFCBbDWYSLPNt8H1mkFnut51CZvUe9ZdHPL3yQ"
              },
              "deletePlaylist": {
                "handler": "src/spotify/playlists/handlers/deletePlaylist.deletePlaylistHandler",
                "events": [
                  {
                    "http": {
                      "path": "playlists/{userId}/{playlistId}",
                      "method": "delete",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-deletePlaylist",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/deletePlaylist.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "DeletePlaylistLambdaVersionrWbClJ7NiaNk1jo7Dv4yqu530EhMYZxugnxspnO0U"
              },
              "setPlaylistImage": {
                "handler": "src/spotify/playlists/handlers/setPlaylistImage.setPlaylistImageHandler",
                "events": [
                  {
                    "http": {
                      "path": "playlists/{userId}/{playlistId}/image",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-setPlaylistImage",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/setPlaylistImage.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "SetPlaylistImageLambdaVersionRpesbiItoRavEjIARF0t4rGaEMR6HNmLztW1J8gimk"
              },
              "reverseGeocode": {
                "handler": "src/locations/handlers/reverseGeocode.reverseGeocodeHandler",
                "events": [
                  {
                    "http": {
                      "path": "reverseGeocode",
                      "method": "get",
                      "request": {
                        "parameters": {
                          "method.request.querystring.latitude": true,
                          "method.request.querystring.longitude": true
                        }
                      },
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "nostalgio-backend-dev-reverseGeocode",
                "package": {
                  "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/reverseGeocode.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "ReverseGeocodeLambdaVersionMNRpCoGfcKG6cQo56dUjibMnzukcGO43H64Z2zKPLM"
              }
            },
            "resources": {
              "Resources": {
                "AuthSessionData": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "AuthSessionData",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "UserId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "UserId",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST",
                    "TimeToLiveSpecification": {
                      "AttributeName": "ExpiresAt",
                      "Enabled": true
                    }
                  }
                },
                "UsersTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "Users",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "UserId",
                        "AttributeType": "S"
                      },
                      {
                        "AttributeName": "SpotifyUserId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "UserId",
                        "KeyType": "HASH"
                      }
                    ],
                    "GlobalSecondaryIndexes": [
                      {
                        "IndexName": "SpotifyUserIdIndex",
                        "KeySchema": [
                          {
                            "AttributeName": "SpotifyUserId",
                            "KeyType": "HASH"
                          }
                        ],
                        "Projection": {
                          "ProjectionType": "ALL"
                        }
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST",
                    "StreamSpecification": {
                      "StreamViewType": "NEW_AND_OLD_IMAGES"
                    }
                  }
                },
                "Memories": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "Memories",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "memoryId",
                        "AttributeType": "S"
                      },
                      {
                        "AttributeName": "city",
                        "AttributeType": "S"
                      },
                      {
                        "AttributeName": "userId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "memoryId",
                        "KeyType": "HASH"
                      }
                    ],
                    "GlobalSecondaryIndexes": [
                      {
                        "IndexName": "CityUserIndex",
                        "KeySchema": [
                          {
                            "AttributeName": "userId",
                            "KeyType": "HASH"
                          },
                          {
                            "AttributeName": "city",
                            "KeyType": "RANGE"
                          }
                        ],
                        "Projection": {
                          "ProjectionType": "ALL"
                        }
                      },
                      {
                        "IndexName": "UserMemoryIndex",
                        "KeySchema": [
                          {
                            "AttributeName": "userId",
                            "KeyType": "HASH"
                          }
                        ],
                        "Projection": {
                          "ProjectionType": "ALL"
                        }
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST",
                    "StreamSpecification": {
                      "StreamViewType": "NEW_AND_OLD_IMAGES"
                    }
                  }
                },
                "ListeningHistoryTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "ListeningHistoryTable",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "geohash",
                        "AttributeType": "S"
                      },
                      {
                        "AttributeName": "timestamp",
                        "AttributeType": "N"
                      },
                      {
                        "AttributeName": "trackId",
                        "AttributeType": "S"
                      },
                      {
                        "AttributeName": "userId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "geohash",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "timestamp",
                        "KeyType": "RANGE"
                      }
                    ],
                    "GlobalSecondaryIndexes": [
                      {
                        "IndexName": "TrackIdIndex",
                        "KeySchema": [
                          {
                            "AttributeName": "trackId",
                            "KeyType": "HASH"
                          },
                          {
                            "AttributeName": "timestamp",
                            "KeyType": "RANGE"
                          }
                        ],
                        "Projection": {
                          "ProjectionType": "ALL"
                        }
                      },
                      {
                        "IndexName": "UserIdIndex",
                        "KeySchema": [
                          {
                            "AttributeName": "userId",
                            "KeyType": "HASH"
                          },
                          {
                            "AttributeName": "timestamp",
                            "KeyType": "RANGE"
                          }
                        ],
                        "Projection": {
                          "ProjectionType": "ALL"
                        }
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST",
                    "StreamSpecification": {
                      "StreamViewType": "NEW_AND_OLD_IMAGES"
                    }
                  }
                },
                "MusicSuggestionsTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "MusicSuggestionsTable",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "locationId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "locationId",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST",
                    "StreamSpecification": {
                      "StreamViewType": "NEW_AND_OLD_IMAGES"
                    }
                  }
                }
              },
              "Outputs": {}
            }
          },
          "configFileDirPath": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server",
          "config": {
            "type": "self"
          },
          "options": {
            "aws-profile": "nostalgio"
          },
          "stage": "dev",
          "dashboard": null,
          "logger": {
            "namespace": "s:core:resolver:self",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "andresgrc",
      "app": "nostalgio-backend",
      "service": "nostalgio-backend",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "region": "us-east-1",
        "environment": {
          "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
          "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
          "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
          "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
          "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
          "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
          "GOOGLE_API_KEY": "<REDACTED>",
          "USERS_TABLE": "Users",
          "MEMORIES_TABLE": "Memories",
          "AUTH_SESSION_TABLE": "AuthSessionData",
          "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
          "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "cognito-idp:AdminCreateUser",
              "cognito-idp:AdminUpdateUserAttributes",
              "cognito-idp:AdminInitiateAuth",
              "cognito-idp:AdminRespondToAuthChallenge",
              "cognito-idp:ListUsers",
              "cognito-idp:AdminGetUser",
              "cognito-idp:AdminDeleteUser"
            ],
            "Resource": "arn:aws:cognito-idp:us-east-1:*:userpool/us-east-1_lqzsgfHQr"
          },
          {
            "Effect": "Allow",
            "Action": [
              "lambda:InvokeFunction"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:Query",
              "dynamodb:PutItem",
              "dynamodb:GetItem",
              "dynamodb:UpdateItem",
              "dynamodb:DeleteItem",
              "dynamodb:DescribeStream",
              "dynamodb:GetRecords",
              "dynamodb:GetShardIterator"
            ],
            "Resource": [
              {
                "Fn::GetAtt": [
                  "UsersTable",
                  "Arn"
                ]
              },
              {
                "Fn::GetAtt": [
                  "UsersTable",
                  "StreamArn"
                ]
              },
              {
                "Fn::GetAtt": [
                  "Memories",
                  "Arn"
                ]
              },
              {
                "Fn::GetAtt": [
                  "Memories",
                  "StreamArn"
                ]
              },
              {
                "Fn::GetAtt": [
                  "AuthSessionData",
                  "Arn"
                ]
              },
              {
                "Fn::GetAtt": [
                  "ListeningHistoryTable",
                  "Arn"
                ]
              },
              {
                "Fn::GetAtt": [
                  "ListeningHistoryTable",
                  "StreamArn"
                ]
              },
              {
                "Fn::GetAtt": [
                  "MusicSuggestionsTable",
                  "Arn"
                ]
              },
              {
                "Fn::GetAtt": [
                  "MusicSuggestionsTable",
                  "StreamArn"
                ]
              },
              "arn:aws:dynamodb:us-east-1:*:table/Users/index/SpotifyUserIdIndex",
              "arn:aws:dynamodb:us-east-1:*:table/Memories/index/CityUserIndex",
              "arn:aws:dynamodb:us-east-1:*:table/Memories/index/UserMemoryIndex",
              "arn:aws:dynamodb:us-east-1:*:table/ListeningHistoryTable/index/TrackIdIndex",
              "arn:aws:dynamodb:us-east-1:*:table/ListeningHistoryTable/index/UserIdIndex"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "*"
          }
        ],
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "SpotifyAuthLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-spotifyAuth"
              }
            },
            "SpotifyCallbackLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-spotifyCallback"
              }
            },
            "ExchangeSpotifyTokenLogGroup": "<REDACTED>",
            "RefreshSpotifyTokenLogGroup": "<REDACTED>",
            "ValidateSpotifyTokenLogGroup": "<REDACTED>",
            "CreateUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-createUser"
              }
            },
            "GetUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getUser"
              }
            },
            "UpdateUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-updateUser"
              }
            },
            "DeleteUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-deleteUser"
              }
            },
            "CreateMemoryLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-createMemory"
              }
            },
            "GetMemoryLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getMemory"
              }
            },
            "UpdateMemoryLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-updateMemory"
              }
            },
            "DeleteMemoryLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-deleteMemory"
              }
            },
            "ListMemoriesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-listMemories"
              }
            },
            "GetCityMemoriesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getCityMemories"
              }
            },
            "AddMemoryImageLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-addMemoryImage"
              }
            },
            "StreamMemoryUpdatesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-streamMemoryUpdates"
              }
            },
            "StoreListeningHistoryLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-storeListeningHistory"
              }
            },
            "GetListeningHistoryByLocationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getListeningHistoryByLocation"
              }
            },
            "SuggestSongsByLocationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-suggestSongsByLocation"
              }
            },
            "GetRecentTracksLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getRecentTracks"
              }
            },
            "GetTopTracksLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getTopTracks"
              }
            },
            "GetTopArtistsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getTopArtists"
              }
            },
            "GetCurrentlyPlayingTrackLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getCurrentlyPlayingTrack"
              }
            },
            "CreatePlaylistLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-createPlaylist"
              }
            },
            "AddTrackToPlaylistLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-addTrackToPlaylist"
              }
            },
            "RemoveTrackFromPlaylistLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-removeTrackFromPlaylist"
              }
            },
            "GetPlaylistDetailsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-getPlaylistDetails"
              }
            },
            "DeletePlaylistLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-deletePlaylist"
              }
            },
            "SetPlaylistImageLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-setPlaylistImage"
              }
            },
            "ReverseGeocodeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/nostalgio-backend-dev-reverseGeocode"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "nostalgio-backend",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/nostalgio-backend-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/nostalgio-backend-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "cognito-idp:AdminCreateUser",
                            "cognito-idp:AdminUpdateUserAttributes",
                            "cognito-idp:AdminInitiateAuth",
                            "cognito-idp:AdminRespondToAuthChallenge",
                            "cognito-idp:ListUsers",
                            "cognito-idp:AdminGetUser",
                            "cognito-idp:AdminDeleteUser"
                          ],
                          "Resource": "arn:aws:cognito-idp:us-east-1:*:userpool/us-east-1_lqzsgfHQr"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "lambda:InvokeFunction"
                          ],
                          "Resource": "*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:Query",
                            "dynamodb:PutItem",
                            "dynamodb:GetItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:DeleteItem",
                            "dynamodb:DescribeStream",
                            "dynamodb:GetRecords",
                            "dynamodb:GetShardIterator"
                          ],
                          "Resource": [
                            {
                              "Fn::GetAtt": [
                                "UsersTable",
                                "Arn"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "UsersTable",
                                "StreamArn"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "Memories",
                                "Arn"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "Memories",
                                "StreamArn"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "AuthSessionData",
                                "Arn"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "ListeningHistoryTable",
                                "Arn"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "ListeningHistoryTable",
                                "StreamArn"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "MusicSuggestionsTable",
                                "Arn"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "MusicSuggestionsTable",
                                "StreamArn"
                              ]
                            },
                            "arn:aws:dynamodb:us-east-1:*:table/Users/index/SpotifyUserIdIndex",
                            "arn:aws:dynamodb:us-east-1:*:table/Memories/index/CityUserIndex",
                            "arn:aws:dynamodb:us-east-1:*:table/Memories/index/UserMemoryIndex",
                            "arn:aws:dynamodb:us-east-1:*:table/ListeningHistoryTable/index/TrackIdIndex",
                            "arn:aws:dynamodb:us-east-1:*:table/ListeningHistoryTable/index/UserIdIndex"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents"
                          ],
                          "Resource": "*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:GetRecords",
                            "dynamodb:GetShardIterator",
                            "dynamodb:DescribeStream",
                            "dynamodb:ListStreams"
                          ],
                          "Resource": [
                            {
                              "Fn::GetAtt": [
                                "Memories",
                                "StreamArn"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "nostalgio-backend",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "SpotifyAuthLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/spotifyAuth.zip"
                },
                "Handler": "src/auth/spotify/spotifyAuthHandler.spotifyAuthHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-spotifyAuth",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SpotifyAuthLogGroup"
              ]
            },
            "SpotifyCallbackLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/spotifyCallback.zip"
                },
                "Handler": "src/auth/spotify/spotifyCallbackHandler.spotifyCallbackHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-spotifyCallback",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SpotifyCallbackLogGroup"
              ]
            },
            "ExchangeSpotifyTokenLambdaFunction": "<REDACTED>",
            "RefreshSpotifyTokenLambdaFunction": "<REDACTED>",
            "ValidateSpotifyTokenLambdaFunction": "<REDACTED>",
            "CreateUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/createUser.zip"
                },
                "Handler": "src/users/handlers/createUser.createUserHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-createUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateUserLogGroup"
              ]
            },
            "GetUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getUser.zip"
                },
                "Handler": "src/users/handlers/getUser.getUserHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-getUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserLogGroup"
              ]
            },
            "UpdateUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/updateUser.zip"
                },
                "Handler": "src/users/handlers/updateUser.updateUserHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-updateUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateUserLogGroup"
              ]
            },
            "DeleteUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/deleteUser.zip"
                },
                "Handler": "src/users/handlers/deleteUser.deleteUserHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-deleteUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteUserLogGroup"
              ]
            },
            "CreateMemoryLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/createMemory.zip"
                },
                "Handler": "src/memories/handlers/createMemory.createMemoryHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-createMemory",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateMemoryLogGroup"
              ]
            },
            "GetMemoryLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getMemory.zip"
                },
                "Handler": "src/memories/handlers/getMemory.getMemoryHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-getMemory",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetMemoryLogGroup"
              ]
            },
            "UpdateMemoryLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/updateMemory.zip"
                },
                "Handler": "src/memories/handlers/updateMemory.updateMemoryHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-updateMemory",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateMemoryLogGroup"
              ]
            },
            "DeleteMemoryLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/deleteMemory.zip"
                },
                "Handler": "src/memories/handlers/deleteMemory.deleteMemoryHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-deleteMemory",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteMemoryLogGroup"
              ]
            },
            "ListMemoriesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/listMemories.zip"
                },
                "Handler": "src/memories/handlers/listMemories.listMemoriesHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-listMemories",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ListMemoriesLogGroup"
              ]
            },
            "GetCityMemoriesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getCityMemories.zip"
                },
                "Handler": "src/memories/handlers/getCityMemories.getCityMemoriesHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-getCityMemories",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetCityMemoriesLogGroup"
              ]
            },
            "AddMemoryImageLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/addMemoryImage.zip"
                },
                "Handler": "src/memories/handlers/addMemoryImage.addMemoryImageHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-addMemoryImage",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AddMemoryImageLogGroup"
              ]
            },
            "StreamMemoryUpdatesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/streamMemoryUpdates.zip"
                },
                "Handler": "src/memories/handlers/streamMemoryUpdates.streamMemoryUpdatesHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-streamMemoryUpdates",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "StreamMemoryUpdatesLogGroup"
              ]
            },
            "StoreListeningHistoryLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/storeListeningHistory.zip"
                },
                "Handler": "src/listeningHistory/handlers/storeListeningHistory.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-storeListeningHistory",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "StoreListeningHistoryLogGroup"
              ]
            },
            "GetListeningHistoryByLocationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getListeningHistoryByLocation.zip"
                },
                "Handler": "src/listeningHistory/handlers/getListeningHistoryByLocation.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-getListeningHistoryByLocation",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetListeningHistoryByLocationLogGroup"
              ]
            },
            "SuggestSongsByLocationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/suggestSongsByLocation.zip"
                },
                "Handler": "src/musicSuggestions/handlers/suggestSongsByLocation.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-suggestSongsByLocation",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SuggestSongsByLocationLogGroup"
              ]
            },
            "GetRecentTracksLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getRecentTracks.zip"
                },
                "Handler": "src/spotify/tracks/handlers/getRecentTracks.getRecentTracksHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-getRecentTracks",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetRecentTracksLogGroup"
              ]
            },
            "GetTopTracksLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getTopTracks.zip"
                },
                "Handler": "src/spotify/tracks/handlers/getTopTracks.getTopTracksHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-getTopTracks",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetTopTracksLogGroup"
              ]
            },
            "GetTopArtistsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getTopArtists.zip"
                },
                "Handler": "src/spotify/tracks/handlers/getTopArtists.getTopArtistsHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-getTopArtists",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetTopArtistsLogGroup"
              ]
            },
            "GetCurrentlyPlayingTrackLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getCurrentlyPlayingTrack.zip"
                },
                "Handler": "src/spotify/tracks/handlers/getCurrentlyPlayingTrack.getCurrentlyPlayingTrackHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-getCurrentlyPlayingTrack",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetCurrentlyPlayingTrackLogGroup"
              ]
            },
            "CreatePlaylistLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/createPlaylist.zip"
                },
                "Handler": "src/spotify/playlists/handlers/createPlaylist.createPlaylistHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-createPlaylist",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreatePlaylistLogGroup"
              ]
            },
            "AddTrackToPlaylistLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/addTrackToPlaylist.zip"
                },
                "Handler": "src/spotify/playlists/handlers/addTrackToPlaylist.addTrackToPlaylistHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-addTrackToPlaylist",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AddTrackToPlaylistLogGroup"
              ]
            },
            "RemoveTrackFromPlaylistLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/removeTrackFromPlaylist.zip"
                },
                "Handler": "src/spotify/playlists/handlers/removeTrackFromPlaylist.removeTrackFromPlaylistHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-removeTrackFromPlaylist",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "RemoveTrackFromPlaylistLogGroup"
              ]
            },
            "GetPlaylistDetailsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/getPlaylistDetails.zip"
                },
                "Handler": "src/spotify/playlists/handlers/getPlaylistDetails.getPlaylistDetailsHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-getPlaylistDetails",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetPlaylistDetailsLogGroup"
              ]
            },
            "DeletePlaylistLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/deletePlaylist.zip"
                },
                "Handler": "src/spotify/playlists/handlers/deletePlaylist.deletePlaylistHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-deletePlaylist",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeletePlaylistLogGroup"
              ]
            },
            "SetPlaylistImageLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/setPlaylistImage.zip"
                },
                "Handler": "src/spotify/playlists/handlers/setPlaylistImage.setPlaylistImageHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-setPlaylistImage",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SetPlaylistImageLogGroup"
              ]
            },
            "ReverseGeocodeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
                  "S3Key": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z/reverseGeocode.zip"
                },
                "Handler": "src/locations/handlers/reverseGeocode.reverseGeocodeHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "nostalgio-backend-dev-reverseGeocode",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "COGNITO_USER_POOL_ID": "us-east-1_lqzsgfHQr",
                    "COGNITO_CLIENT_ID": "12pcqimdf7f5qdk3h3uhv5nhtc",
                    "COGNITO_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "SPOTIFY_CLIENT_ID": "c7806fa71cc749499f5c7517aa908f39",
                    "SPOTIFY_CLIENT_SECRET": "<REDACTED>",
                    "SPOTIFY_REDIRECT_URI": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev/callback",
                    "GOOGLE_API_KEY": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEMORIES_TABLE": "Memories",
                    "AUTH_SESSION_TABLE": "AuthSessionData",
                    "LISTENING_HISTORY_TABLE": "ListeningHistoryTable",
                    "MUSIC_SUGGESTIONS_TABLE": "MusicSuggestionsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ReverseGeocodeLogGroup"
              ]
            },
            "SpotifyAuthLambdaVersionJbR8Cp3sua5TftesoXh50qapDR3qfCGKlq4UyZJkmOY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SpotifyAuthLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "RefreshSpotifyTokenLambdaVersionGodXQfdYONmaVkETjzJcs2mIhWV6WDn5wxmPVBIz0": "<REDACTED>",
            "ExchangeSpotifyTokenLambdaVersionE1uewPFe3tljbfAvZkLwr0srO1NaKHpdYbJqLvktVY": "<REDACTED>",
            "SpotifyCallbackLambdaVersionzvT3hECX4Fa89pCv14JCDIevLI2WJYlGGcmcwLwiPqY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SpotifyCallbackLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "UpdateUserLambdaVersion3oz9SvHtAenKQY5GyjUifdzkRHn6KdPq7yc73iJf3xE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateUserLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "CreateUserLambdaVersionkg1G5WcMhKigmzuzRf85uFIXEyAHQmIShiNYZ35zd4I": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateUserLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "GetUserLambdaVersion7yXclQ6G00RaNbY0oj4FxgRHVlOJmaVRE3Ory6wksY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "CreateMemoryLambdaVersionxikP1oC4J8DvK5qo1YmawnQSgFGC5eVyt6PrlKdwlrY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateMemoryLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "UpdateMemoryLambdaVersionZT9mAaN3L4vOvxL12Mn3OaMgESgDEfSoQ1VUlfWHGs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateMemoryLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "DeleteUserLambdaVersionTbLvqe25V1RjXsclZqB6JpjPugEWqZgZaIRFz7hlu2w": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteUserLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "DeleteMemoryLambdaVersionwuu45y6L5uMFsiZEq2Ci0IQfT9blmRitOZ7Xg4Ow": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteMemoryLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "ValidateSpotifyTokenLambdaVersionin1pt91wmdxWLNSm6SFEQkbhy5xqWofhrFGgfqDavmY": "<REDACTED>",
            "AddMemoryImageLambdaVersionPW0sPbjahY4Y8rFnu9nPKvbGtaX6yn3y36j2YJ4UhY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AddMemoryImageLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "GetMemoryLambdaVersions1eZSLNBSc3RPtefH7eaLEU94Ag8hfOtHtjAyu5EQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetMemoryLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "ListMemoriesLambdaVersion4cl9DrJTrpSVo28ylNREv8nGBPyJkFiFBUWoKqs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ListMemoriesLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "GetCityMemoriesLambdaVersion71dPDd3NUkNVE88VGCTlSdMmpYay5r2Ax0BzopQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetCityMemoriesLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "SuggestSongsByLocationLambdaVersionIXpiMKsTZHkQGzKkq4poCvhMRPUynNcJ0uUyfJNXms": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SuggestSongsByLocationLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "GetCurrentlyPlayingTrackLambdaVersionSALxifadhMxfPVF5lWCOdBGPHv64I3ETFPuwdD1MU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetCurrentlyPlayingTrackLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "StoreListeningHistoryLambdaVersionjRDsLKzynq5NwvfXsBUZkaMTi2L3TDcvA1CuHLzv70": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "StoreListeningHistoryLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "StreamMemoryUpdatesLambdaVersionCoVwkP6CDRNY7yUorfgX1gwze9UlaA4Xt2nbv0XtYM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "StreamMemoryUpdatesLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "RemoveTrackFromPlaylistLambdaVersionjRi7ZqmWp0WD1Jb9esFmn1VufvLqETYHATFM8byuh4U": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "RemoveTrackFromPlaylistLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "GetListeningHistoryByLocationLambdaVersionD21EfbEJr1U6Ndgg368pPNmHbTe1cjvekAZbQkf0A": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetListeningHistoryByLocationLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "GetTopArtistsLambdaVersionwolLGNVMJo6bXl4UfiReP3KUnhERyZqi4l0VxTiYKI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetTopArtistsLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "CreatePlaylistLambdaVersionBp6me3UEkA9FXDqSdIVap7bIHYOIZ512TBuTkQCcI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreatePlaylistLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "GetRecentTracksLambdaVersionhTHgheDMEeJsVFGrG4PgMB3QMbVyUVr8CvQT2NVkeE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetRecentTracksLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "GetTopTracksLambdaVersionQBH4mZXSDLhy2NqJPje1lq15sJnv9DKSarYIfRvHDU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetTopTracksLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "AddTrackToPlaylistLambdaVersionXBkTBIvIOwQJvR8ct5mWMlIdrWTrULDy42lfQ81SQU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AddTrackToPlaylistLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "GetPlaylistDetailsLambdaVersion9UemFCBbDWYSLPNt8H1mkFnut51CZvUe9ZdHPL3yQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetPlaylistDetailsLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "DeletePlaylistLambdaVersionrWbClJ7NiaNk1jo7Dv4yqu530EhMYZxugnxspnO0U": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeletePlaylistLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "SetPlaylistImageLambdaVersionRpesbiItoRavEjIARF0t4rGaEMR6HNmLztW1J8gimk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SetPlaylistImageLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "ReverseGeocodeLambdaVersionMNRpCoGfcKG6cQo56dUjibMnzukcGO43H64Z2zKPLM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ReverseGeocodeLambdaFunction"
                },
                "CodeSha256": "Z3K3RvRnGabF31DY+tmK607H13Cl3mkNYx5Q4OcW4Go="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-nostalgio-backend",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceAuth": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "auth",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuthLogin": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAuth"
                },
                "PathPart": "login",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceCallback": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "callback",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceExchangespotifytoken": "<REDACTED>",
            "ApiGatewayResourceRefreshspotifytoken": "<REDACTED>",
            "ApiGatewayResourceValidatespotifytoken": "<REDACTED>",
            "ApiGatewayResourceValidatespotifytokenUseridVar": "<REDACTED>",
            "ApiGatewayResourceUsers": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "users",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersUseridVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsers"
                },
                "PathPart": "{userId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersUseridVarSuggestions": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsersUseridVar"
                },
                "PathPart": "suggestions",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersUseridVarSuggestionsLocation": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsersUseridVarSuggestions"
                },
                "PathPart": "location",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersUseridVarSpotify": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsersUseridVar"
                },
                "PathPart": "spotify",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersUseridVarSpotifyRecentDashtracks": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsersUseridVarSpotify"
                },
                "PathPart": "recent-tracks",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersUseridVarSpotifyTopDashtracks": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsersUseridVarSpotify"
                },
                "PathPart": "top-tracks",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersUseridVarSpotifyTopDashartists": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsersUseridVarSpotify"
                },
                "PathPart": "top-artists",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersUseridVarSpotifyCurrentlyDashplaying": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsersUseridVarSpotify"
                },
                "PathPart": "currently-playing",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersSpotify": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsers"
                },
                "PathPart": "spotify",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersSpotifySpotifyuseridVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsersSpotify"
                },
                "PathPart": "{spotifyUserId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMemories": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "memories",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMemoriesUseridVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceMemories"
                },
                "PathPart": "{userId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMemoriesUseridVarMemoryidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceMemoriesUseridVar"
                },
                "PathPart": "{memoryId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMemoriesUseridVarMemoryidVarImage": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVar"
                },
                "PathPart": "image",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMemoriesUseridVarCity": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceMemoriesUseridVar"
                },
                "PathPart": "city",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMemoriesUseridVarCityCityVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceMemoriesUseridVarCity"
                },
                "PathPart": "{city}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceListeningDashhistory": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "listening-history",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceListeningDashhistoryStore": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceListeningDashhistory"
                },
                "PathPart": "store",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceListeningDashhistoryLatVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceListeningDashhistory"
                },
                "PathPart": "{lat}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceListeningDashhistoryLatVarLonVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceListeningDashhistoryLatVar"
                },
                "PathPart": "{lon}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePlaylists": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "playlists",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePlaylistsUseridVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePlaylists"
                },
                "PathPart": "{userId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePlaylistsUseridVarPlaylistidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePlaylistsUseridVar"
                },
                "PathPart": "{playlistId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarTracks": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVar"
                },
                "PathPart": "tracks",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarImage": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVar"
                },
                "PathPart": "image",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceReversegeocode": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "reverseGeocode",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAuthLoginOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthLogin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodCallbackOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCallback"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodExchangespotifytokenOptions": "<REDACTED>",
            "ApiGatewayMethodRefreshspotifytokenOptions": "<REDACTED>",
            "ApiGatewayMethodValidatespotifytokenUseridVarOptions": "<REDACTED>",
            "ApiGatewayMethodUsersOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsers"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersUseridVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersSpotifySpotifyuseridVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersSpotifySpotifyuseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMemoriesOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMemories"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMemoriesUseridVarMemoryidVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMemoriesUseridVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMemoriesUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMemoriesUseridVarCityCityVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMemoriesUseridVarCityCityVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMemoriesUseridVarMemoryidVarImageOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVarImage"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodListeningDashhistoryStoreOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceListeningDashhistoryStore"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodListeningDashhistoryLatVarLonVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceListeningDashhistoryLatVarLonVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersUseridVarSuggestionsLocationOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVarSuggestionsLocation"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersUseridVarSpotifyRecentDashtracksOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVarSpotifyRecentDashtracks"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersUseridVarSpotifyTopDashtracksOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVarSpotifyTopDashtracks"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersUseridVarSpotifyTopDashartistsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVarSpotifyTopDashartists"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersUseridVarSpotifyCurrentlyDashplayingOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVarSpotifyCurrentlyDashplaying"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPlaylistsUseridVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlaylistsUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarTracksOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarTracks"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarImageOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarImage"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodReversegeocodeOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceReversegeocode"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAuthLoginGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthLogin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SpotifyAuthLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "SpotifyAuthLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodCallbackGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCallback"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SpotifyCallbackLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "SpotifyCallbackLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodExchangespotifytokenPost": "<REDACTED>",
            "ApiGatewayMethodRefreshspotifytokenPost": "<REDACTED>",
            "ApiGatewayMethodValidatespotifytokenUseridVarPost": "<REDACTED>",
            "ApiGatewayMethodUsersPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsers"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateUserLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersUseridVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetUserLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersSpotifySpotifyuseridVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersSpotifySpotifyuseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetUserLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersUseridVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateUserLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersUseridVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteUserLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMemoriesPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMemories"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateMemoryLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateMemoryLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMemoriesUseridVarMemoryidVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetMemoryLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetMemoryLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMemoriesUseridVarMemoryidVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateMemoryLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateMemoryLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMemoriesUseridVarMemoryidVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteMemoryLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteMemoryLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMemoriesUseridVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMemoriesUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ListMemoriesLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ListMemoriesLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMemoriesUseridVarCityCityVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMemoriesUseridVarCityCityVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetCityMemoriesLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetCityMemoriesLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMemoriesUseridVarMemoryidVarImagePut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMemoriesUseridVarMemoryidVarImage"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AddMemoryImageLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AddMemoryImageLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodListeningDashhistoryStorePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceListeningDashhistoryStore"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "StoreListeningHistoryLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "StoreListeningHistoryLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodListeningDashhistoryLatVarLonVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {
                  "method.request.querystring.radius": false,
                  "method.request.path.lat": true,
                  "method.request.path.lon": true
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceListeningDashhistoryLatVarLonVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetListeningHistoryByLocationLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": [],
                "RequestValidatorId": {
                  "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                }
              },
              "DependsOn": [
                "GetListeningHistoryByLocationLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersUseridVarSuggestionsLocationGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {
                  "method.request.querystring.lat": true,
                  "method.request.querystring.lon": true,
                  "method.request.querystring.radius": false
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVarSuggestionsLocation"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SuggestSongsByLocationLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": [],
                "RequestValidatorId": {
                  "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                }
              },
              "DependsOn": [
                "SuggestSongsByLocationLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersUseridVarSpotifyRecentDashtracksGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVarSpotifyRecentDashtracks"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetRecentTracksLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetRecentTracksLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersUseridVarSpotifyTopDashtracksGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVarSpotifyTopDashtracks"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetTopTracksLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetTopTracksLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersUseridVarSpotifyTopDashartistsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVarSpotifyTopDashartists"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetTopArtistsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetTopArtistsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersUseridVarSpotifyCurrentlyDashplayingGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {
                  "method.request.path.userId": true
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVarSpotifyCurrentlyDashplaying"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetCurrentlyPlayingTrackLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": [],
                "RequestValidatorId": {
                  "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                }
              },
              "DependsOn": [
                "GetCurrentlyPlayingTrackLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPlaylistsUseridVarPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {
                  "method.request.path.userId": true
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlaylistsUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreatePlaylistLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": [],
                "RequestValidatorId": {
                  "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                }
              },
              "DependsOn": [
                "CreatePlaylistLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarTracksPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {
                  "method.request.path.userId": true,
                  "method.request.path.playlistId": true
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarTracks"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AddTrackToPlaylistLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": [],
                "RequestValidatorId": {
                  "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                }
              },
              "DependsOn": [
                "AddTrackToPlaylistLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarTracksDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {
                  "method.request.path.userId": true,
                  "method.request.path.playlistId": true
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarTracks"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "RemoveTrackFromPlaylistLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": [],
                "RequestValidatorId": {
                  "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                }
              },
              "DependsOn": [
                "RemoveTrackFromPlaylistLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {
                  "method.request.path.userId": true,
                  "method.request.path.playlistId": true
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetPlaylistDetailsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": [],
                "RequestValidatorId": {
                  "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                }
              },
              "DependsOn": [
                "GetPlaylistDetailsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeletePlaylistLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeletePlaylistLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarImagePut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlaylistsUseridVarPlaylistidVarImage"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SetPlaylistImageLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "SetPlaylistImageLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodReversegeocodeGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {
                  "method.request.querystring.latitude": true,
                  "method.request.querystring.longitude": true
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceReversegeocode"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ReverseGeocodeLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": [],
                "RequestValidatorId": {
                  "Ref": "ApiGatewayNostalgiobackendRequestValidator"
                }
              },
              "DependsOn": [
                "ReverseGeocodeLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayNostalgiobackendRequestValidator": {
              "Type": "AWS::ApiGateway::RequestValidator",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ValidateRequestBody": true,
                "ValidateRequestParameters": true,
                "Name": "nostalgio-backend-dev | Validate request body and querystring parameters"
              }
            },
            "ApiGatewayDeployment1728528928183": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodAuthLoginOptions",
                "ApiGatewayMethodCallbackOptions",
                "ApiGatewayMethodExchangespotifytokenOptions",
                "ApiGatewayMethodRefreshspotifytokenOptions",
                "ApiGatewayMethodValidatespotifytokenUseridVarOptions",
                "ApiGatewayMethodUsersOptions",
                "ApiGatewayMethodUsersUseridVarOptions",
                "ApiGatewayMethodUsersSpotifySpotifyuseridVarOptions",
                "ApiGatewayMethodMemoriesOptions",
                "ApiGatewayMethodMemoriesUseridVarMemoryidVarOptions",
                "ApiGatewayMethodMemoriesUseridVarOptions",
                "ApiGatewayMethodMemoriesUseridVarCityCityVarOptions",
                "ApiGatewayMethodMemoriesUseridVarMemoryidVarImageOptions",
                "ApiGatewayMethodListeningDashhistoryStoreOptions",
                "ApiGatewayMethodListeningDashhistoryLatVarLonVarOptions",
                "ApiGatewayMethodUsersUseridVarSuggestionsLocationOptions",
                "ApiGatewayMethodUsersUseridVarSpotifyRecentDashtracksOptions",
                "ApiGatewayMethodUsersUseridVarSpotifyTopDashtracksOptions",
                "ApiGatewayMethodUsersUseridVarSpotifyTopDashartistsOptions",
                "ApiGatewayMethodUsersUseridVarSpotifyCurrentlyDashplayingOptions",
                "ApiGatewayMethodPlaylistsUseridVarOptions",
                "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarTracksOptions",
                "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarOptions",
                "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarImageOptions",
                "ApiGatewayMethodReversegeocodeOptions",
                "ApiGatewayMethodAuthLoginGet",
                "ApiGatewayMethodCallbackGet",
                "ApiGatewayMethodExchangespotifytokenPost",
                "ApiGatewayMethodRefreshspotifytokenPost",
                "ApiGatewayMethodValidatespotifytokenUseridVarPost",
                "ApiGatewayMethodUsersPost",
                "ApiGatewayMethodUsersUseridVarGet",
                "ApiGatewayMethodUsersSpotifySpotifyuseridVarGet",
                "ApiGatewayMethodUsersUseridVarPut",
                "ApiGatewayMethodUsersUseridVarDelete",
                "ApiGatewayMethodMemoriesPost",
                "ApiGatewayMethodMemoriesUseridVarMemoryidVarGet",
                "ApiGatewayMethodMemoriesUseridVarMemoryidVarPut",
                "ApiGatewayMethodMemoriesUseridVarMemoryidVarDelete",
                "ApiGatewayMethodMemoriesUseridVarGet",
                "ApiGatewayMethodMemoriesUseridVarCityCityVarGet",
                "ApiGatewayMethodMemoriesUseridVarMemoryidVarImagePut",
                "ApiGatewayMethodListeningDashhistoryStorePost",
                "ApiGatewayMethodListeningDashhistoryLatVarLonVarGet",
                "ApiGatewayMethodUsersUseridVarSuggestionsLocationGet",
                "ApiGatewayMethodUsersUseridVarSpotifyRecentDashtracksGet",
                "ApiGatewayMethodUsersUseridVarSpotifyTopDashtracksGet",
                "ApiGatewayMethodUsersUseridVarSpotifyTopDashartistsGet",
                "ApiGatewayMethodUsersUseridVarSpotifyCurrentlyDashplayingGet",
                "ApiGatewayMethodPlaylistsUseridVarPost",
                "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarTracksPost",
                "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarTracksDelete",
                "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarGet",
                "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarDelete",
                "ApiGatewayMethodPlaylistsUseridVarPlaylistidVarImagePut",
                "ApiGatewayMethodReversegeocodeGet"
              ]
            },
            "SpotifyAuthLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SpotifyAuthLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "SpotifyCallbackLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SpotifyCallbackLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ExchangeSpotifyTokenLambdaPermissionApiGateway": "<REDACTED>",
            "RefreshSpotifyTokenLambdaPermissionApiGateway": "<REDACTED>",
            "ValidateSpotifyTokenLambdaPermissionApiGateway": "<REDACTED>",
            "CreateUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateMemoryLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateMemoryLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetMemoryLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetMemoryLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateMemoryLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateMemoryLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteMemoryLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteMemoryLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ListMemoriesLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ListMemoriesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetCityMemoriesLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetCityMemoriesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "AddMemoryImageLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AddMemoryImageLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "StoreListeningHistoryLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "StoreListeningHistoryLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetListeningHistoryByLocationLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetListeningHistoryByLocationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "SuggestSongsByLocationLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SuggestSongsByLocationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetRecentTracksLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetRecentTracksLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetTopTracksLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetTopTracksLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetTopArtistsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetTopArtistsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetCurrentlyPlayingTrackLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetCurrentlyPlayingTrackLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreatePlaylistLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreatePlaylistLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "AddTrackToPlaylistLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AddTrackToPlaylistLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "RemoveTrackFromPlaylistLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "RemoveTrackFromPlaylistLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetPlaylistDetailsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetPlaylistDetailsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeletePlaylistLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeletePlaylistLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "SetPlaylistImageLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SetPlaylistImageLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ReverseGeocodeLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ReverseGeocodeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "StreamMemoryUpdatesEventSourceMappingDynamodbMemories": {
              "Type": "AWS::Lambda::EventSourceMapping",
              "DependsOn": [
                "IamRoleLambdaExecution"
              ],
              "Properties": {
                "BatchSize": 10,
                "Enabled": true,
                "EventSourceArn": {
                  "Fn::GetAtt": [
                    "Memories",
                    "StreamArn"
                  ]
                },
                "FunctionName": {
                  "Fn::GetAtt": [
                    "StreamMemoryUpdatesLambdaFunction",
                    "Arn"
                  ]
                },
                "StartingPosition": "TRIM_HORIZON"
              }
            },
            "AuthSessionData": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "AuthSessionData",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "UserId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "UserId",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST",
                "TimeToLiveSpecification": {
                  "AttributeName": "ExpiresAt",
                  "Enabled": true
                }
              }
            },
            "UsersTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "Users",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "UserId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "SpotifyUserId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "UserId",
                    "KeyType": "HASH"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "SpotifyUserIdIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "SpotifyUserId",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST",
                "StreamSpecification": {
                  "StreamViewType": "NEW_AND_OLD_IMAGES"
                }
              }
            },
            "Memories": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "Memories",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "memoryId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "city",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "memoryId",
                    "KeyType": "HASH"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "CityUserIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "city",
                        "KeyType": "RANGE"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  },
                  {
                    "IndexName": "UserMemoryIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST",
                "StreamSpecification": {
                  "StreamViewType": "NEW_AND_OLD_IMAGES"
                }
              }
            },
            "ListeningHistoryTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "ListeningHistoryTable",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "geohash",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "timestamp",
                    "AttributeType": "N"
                  },
                  {
                    "AttributeName": "trackId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "geohash",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "timestamp",
                    "KeyType": "RANGE"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "TrackIdIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "trackId",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "timestamp",
                        "KeyType": "RANGE"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  },
                  {
                    "IndexName": "UserIdIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "timestamp",
                        "KeyType": "RANGE"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST",
                "StreamSpecification": {
                  "StreamViewType": "NEW_AND_OLD_IMAGES"
                }
              }
            },
            "MusicSuggestionsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "MusicSuggestionsTable",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "locationId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "locationId",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST",
                "StreamSpecification": {
                  "StreamViewType": "NEW_AND_OLD_IMAGES"
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
              "Export": {
                "Name": "sls-nostalgio-backend-dev-ServerlessDeploymentBucketName"
              }
            },
            "SpotifyAuthLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SpotifyAuthLambdaVersionJbR8Cp3sua5TftesoXh50qapDR3qfCGKlq4UyZJkmOY"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-SpotifyAuthLambdaFunctionQualifiedArn"
              }
            },
            "RefreshSpotifyTokenLambdaFunctionQualifiedArn": "<REDACTED>",
            "ExchangeSpotifyTokenLambdaFunctionQualifiedArn": "<REDACTED>",
            "SpotifyCallbackLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SpotifyCallbackLambdaVersionzvT3hECX4Fa89pCv14JCDIevLI2WJYlGGcmcwLwiPqY"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-SpotifyCallbackLambdaFunctionQualifiedArn"
              }
            },
            "UpdateUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateUserLambdaVersion3oz9SvHtAenKQY5GyjUifdzkRHn6KdPq7yc73iJf3xE"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-UpdateUserLambdaFunctionQualifiedArn"
              }
            },
            "CreateUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateUserLambdaVersionkg1G5WcMhKigmzuzRf85uFIXEyAHQmIShiNYZ35zd4I"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-CreateUserLambdaFunctionQualifiedArn"
              }
            },
            "GetUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserLambdaVersion7yXclQ6G00RaNbY0oj4FxgRHVlOJmaVRE3Ory6wksY"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-GetUserLambdaFunctionQualifiedArn"
              }
            },
            "CreateMemoryLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateMemoryLambdaVersionxikP1oC4J8DvK5qo1YmawnQSgFGC5eVyt6PrlKdwlrY"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-CreateMemoryLambdaFunctionQualifiedArn"
              }
            },
            "UpdateMemoryLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateMemoryLambdaVersionZT9mAaN3L4vOvxL12Mn3OaMgESgDEfSoQ1VUlfWHGs"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-UpdateMemoryLambdaFunctionQualifiedArn"
              }
            },
            "DeleteUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteUserLambdaVersionTbLvqe25V1RjXsclZqB6JpjPugEWqZgZaIRFz7hlu2w"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-DeleteUserLambdaFunctionQualifiedArn"
              }
            },
            "DeleteMemoryLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteMemoryLambdaVersionwuu45y6L5uMFsiZEq2Ci0IQfT9blmRitOZ7Xg4Ow"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-DeleteMemoryLambdaFunctionQualifiedArn"
              }
            },
            "ValidateSpotifyTokenLambdaFunctionQualifiedArn": "<REDACTED>",
            "AddMemoryImageLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AddMemoryImageLambdaVersionPW0sPbjahY4Y8rFnu9nPKvbGtaX6yn3y36j2YJ4UhY"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-AddMemoryImageLambdaFunctionQualifiedArn"
              }
            },
            "GetMemoryLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetMemoryLambdaVersions1eZSLNBSc3RPtefH7eaLEU94Ag8hfOtHtjAyu5EQ"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-GetMemoryLambdaFunctionQualifiedArn"
              }
            },
            "ListMemoriesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ListMemoriesLambdaVersion4cl9DrJTrpSVo28ylNREv8nGBPyJkFiFBUWoKqs"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-ListMemoriesLambdaFunctionQualifiedArn"
              }
            },
            "GetCityMemoriesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetCityMemoriesLambdaVersion71dPDd3NUkNVE88VGCTlSdMmpYay5r2Ax0BzopQ"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-GetCityMemoriesLambdaFunctionQualifiedArn"
              }
            },
            "SuggestSongsByLocationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SuggestSongsByLocationLambdaVersionIXpiMKsTZHkQGzKkq4poCvhMRPUynNcJ0uUyfJNXms"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-SuggestSongsByLocationLambdaFunctionQualifiedArn"
              }
            },
            "GetCurrentlyPlayingTrackLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetCurrentlyPlayingTrackLambdaVersionSALxifadhMxfPVF5lWCOdBGPHv64I3ETFPuwdD1MU"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-GetCurrentlyPlayingTrackLambdaFunctionQualifiedArn"
              }
            },
            "StoreListeningHistoryLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "StoreListeningHistoryLambdaVersionjRDsLKzynq5NwvfXsBUZkaMTi2L3TDcvA1CuHLzv70"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-StoreListeningHistoryLambdaFunctionQualifiedArn"
              }
            },
            "StreamMemoryUpdatesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "StreamMemoryUpdatesLambdaVersionCoVwkP6CDRNY7yUorfgX1gwze9UlaA4Xt2nbv0XtYM"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-StreamMemoryUpdatesLambdaFunctionQualifiedArn"
              }
            },
            "RemoveTrackFromPlaylistLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "RemoveTrackFromPlaylistLambdaVersionjRi7ZqmWp0WD1Jb9esFmn1VufvLqETYHATFM8byuh4U"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-RemoveTrackFromPlaylistLambdaFunctionQualifiedArn"
              }
            },
            "GetListeningHistoryByLocationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetListeningHistoryByLocationLambdaVersionD21EfbEJr1U6Ndgg368pPNmHbTe1cjvekAZbQkf0A"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-GetListeningHistoryByLocationLambdaFunctionQualifiedArn"
              }
            },
            "GetTopArtistsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetTopArtistsLambdaVersionwolLGNVMJo6bXl4UfiReP3KUnhERyZqi4l0VxTiYKI"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-GetTopArtistsLambdaFunctionQualifiedArn"
              }
            },
            "CreatePlaylistLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreatePlaylistLambdaVersionBp6me3UEkA9FXDqSdIVap7bIHYOIZ512TBuTkQCcI"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-CreatePlaylistLambdaFunctionQualifiedArn"
              }
            },
            "GetRecentTracksLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetRecentTracksLambdaVersionhTHgheDMEeJsVFGrG4PgMB3QMbVyUVr8CvQT2NVkeE"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-GetRecentTracksLambdaFunctionQualifiedArn"
              }
            },
            "GetTopTracksLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetTopTracksLambdaVersionQBH4mZXSDLhy2NqJPje1lq15sJnv9DKSarYIfRvHDU"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-GetTopTracksLambdaFunctionQualifiedArn"
              }
            },
            "AddTrackToPlaylistLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AddTrackToPlaylistLambdaVersionXBkTBIvIOwQJvR8ct5mWMlIdrWTrULDy42lfQ81SQU"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-AddTrackToPlaylistLambdaFunctionQualifiedArn"
              }
            },
            "GetPlaylistDetailsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetPlaylistDetailsLambdaVersion9UemFCBbDWYSLPNt8H1mkFnut51CZvUe9ZdHPL3yQ"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-GetPlaylistDetailsLambdaFunctionQualifiedArn"
              }
            },
            "DeletePlaylistLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeletePlaylistLambdaVersionrWbClJ7NiaNk1jo7Dv4yqu530EhMYZxugnxspnO0U"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-DeletePlaylistLambdaFunctionQualifiedArn"
              }
            },
            "SetPlaylistImageLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SetPlaylistImageLambdaVersionRpesbiItoRavEjIARF0t4rGaEMR6HNmLztW1J8gimk"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-SetPlaylistImageLambdaFunctionQualifiedArn"
              }
            },
            "ReverseGeocodeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ReverseGeocodeLambdaVersionMNRpCoGfcKG6cQo56dUjibMnzukcGO43H64Z2zKPLM"
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-ReverseGeocodeLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-nostalgio-backend-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "package": {
        "individually": true,
        "artifactsS3KeyDirname": "serverless/nostalgio-backend/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
        "artifactDirectoryName": "serverless/nostalgio-backend/dev/1728528991172-2024-10-10T02:56:31.172Z"
      },
      "plugins": [
        "serverless-offline"
      ],
      "functions": {
        "spotifyAuth": {
          "handler": "src/auth/spotify/spotifyAuthHandler.spotifyAuthHandler",
          "events": [
            {
              "http": {
                "path": "auth/login",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-spotifyAuth",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/spotifyAuth.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "SpotifyAuthLambdaVersionJbR8Cp3sua5TftesoXh50qapDR3qfCGKlq4UyZJkmOY"
        },
        "spotifyCallback": {
          "handler": "src/auth/spotify/spotifyCallbackHandler.spotifyCallbackHandler",
          "events": [
            {
              "http": {
                "path": "callback",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-spotifyCallback",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/spotifyCallback.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "SpotifyCallbackLambdaVersionzvT3hECX4Fa89pCv14JCDIevLI2WJYlGGcmcwLwiPqY"
        },
        "exchangeSpotifyToken": "<REDACTED>",
        "refreshSpotifyToken": "<REDACTED>",
        "validateSpotifyToken": "<REDACTED>",
        "createUser": {
          "handler": "src/users/handlers/createUser.createUserHandler",
          "events": [
            {
              "http": {
                "path": "users",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-createUser",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/createUser.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CreateUserLambdaVersionkg1G5WcMhKigmzuzRf85uFIXEyAHQmIShiNYZ35zd4I"
        },
        "getUser": {
          "handler": "src/users/handlers/getUser.getUserHandler",
          "events": [
            {
              "http": {
                "path": "users/{userId}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "users/spotify/{spotifyUserId}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-getUser",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getUser.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetUserLambdaVersion7yXclQ6G00RaNbY0oj4FxgRHVlOJmaVRE3Ory6wksY"
        },
        "updateUser": {
          "handler": "src/users/handlers/updateUser.updateUserHandler",
          "events": [
            {
              "http": {
                "path": "users/{userId}",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-updateUser",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/updateUser.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "UpdateUserLambdaVersion3oz9SvHtAenKQY5GyjUifdzkRHn6KdPq7yc73iJf3xE"
        },
        "deleteUser": {
          "handler": "src/users/handlers/deleteUser.deleteUserHandler",
          "events": [
            {
              "http": {
                "path": "users/{userId}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-deleteUser",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/deleteUser.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "DeleteUserLambdaVersionTbLvqe25V1RjXsclZqB6JpjPugEWqZgZaIRFz7hlu2w"
        },
        "createMemory": {
          "handler": "src/memories/handlers/createMemory.createMemoryHandler",
          "events": [
            {
              "http": {
                "path": "memories",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-createMemory",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/createMemory.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CreateMemoryLambdaVersionxikP1oC4J8DvK5qo1YmawnQSgFGC5eVyt6PrlKdwlrY"
        },
        "getMemory": {
          "handler": "src/memories/handlers/getMemory.getMemoryHandler",
          "events": [
            {
              "http": {
                "path": "memories/{userId}/{memoryId}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-getMemory",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getMemory.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetMemoryLambdaVersions1eZSLNBSc3RPtefH7eaLEU94Ag8hfOtHtjAyu5EQ"
        },
        "updateMemory": {
          "handler": "src/memories/handlers/updateMemory.updateMemoryHandler",
          "events": [
            {
              "http": {
                "path": "memories/{userId}/{memoryId}",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-updateMemory",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/updateMemory.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "UpdateMemoryLambdaVersionZT9mAaN3L4vOvxL12Mn3OaMgESgDEfSoQ1VUlfWHGs"
        },
        "deleteMemory": {
          "handler": "src/memories/handlers/deleteMemory.deleteMemoryHandler",
          "events": [
            {
              "http": {
                "path": "memories/{userId}/{memoryId}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-deleteMemory",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/deleteMemory.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "DeleteMemoryLambdaVersionwuu45y6L5uMFsiZEq2Ci0IQfT9blmRitOZ7Xg4Ow"
        },
        "listMemories": {
          "handler": "src/memories/handlers/listMemories.listMemoriesHandler",
          "events": [
            {
              "http": {
                "path": "memories/{userId}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-listMemories",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/listMemories.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "ListMemoriesLambdaVersion4cl9DrJTrpSVo28ylNREv8nGBPyJkFiFBUWoKqs"
        },
        "getCityMemories": {
          "handler": "src/memories/handlers/getCityMemories.getCityMemoriesHandler",
          "events": [
            {
              "http": {
                "path": "memories/{userId}/city/{city}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-getCityMemories",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getCityMemories.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetCityMemoriesLambdaVersion71dPDd3NUkNVE88VGCTlSdMmpYay5r2Ax0BzopQ"
        },
        "addMemoryImage": {
          "handler": "src/memories/handlers/addMemoryImage.addMemoryImageHandler",
          "events": [
            {
              "http": {
                "path": "memories/{userId}/{memoryId}/image",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-addMemoryImage",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/addMemoryImage.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "AddMemoryImageLambdaVersionPW0sPbjahY4Y8rFnu9nPKvbGtaX6yn3y36j2YJ4UhY"
        },
        "streamMemoryUpdates": {
          "handler": "src/memories/handlers/streamMemoryUpdates.streamMemoryUpdatesHandler",
          "events": [
            {
              "stream": {
                "type": "dynamodb",
                "arn": {
                  "Fn::GetAtt": [
                    "Memories",
                    "StreamArn"
                  ]
                }
              }
            }
          ],
          "name": "nostalgio-backend-dev-streamMemoryUpdates",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/streamMemoryUpdates.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "StreamMemoryUpdatesLambdaVersionCoVwkP6CDRNY7yUorfgX1gwze9UlaA4Xt2nbv0XtYM"
        },
        "storeListeningHistory": {
          "handler": "src/listeningHistory/handlers/storeListeningHistory.handler",
          "events": [
            {
              "http": {
                "path": "listening-history/store",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-storeListeningHistory",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/storeListeningHistory.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "StoreListeningHistoryLambdaVersionjRDsLKzynq5NwvfXsBUZkaMTi2L3TDcvA1CuHLzv70"
        },
        "getListeningHistoryByLocation": {
          "handler": "src/listeningHistory/handlers/getListeningHistoryByLocation.handler",
          "events": [
            {
              "http": {
                "path": "listening-history/{lat}/{lon}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "request": {
                  "parameters": {
                    "method.request.querystring.radius": false,
                    "method.request.path.lat": true,
                    "method.request.path.lon": true
                  }
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-getListeningHistoryByLocation",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getListeningHistoryByLocation.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetListeningHistoryByLocationLambdaVersionD21EfbEJr1U6Ndgg368pPNmHbTe1cjvekAZbQkf0A"
        },
        "suggestSongsByLocation": {
          "handler": "src/musicSuggestions/handlers/suggestSongsByLocation.handler",
          "events": [
            {
              "http": {
                "path": "users/{userId}/suggestions/location",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "request": {
                  "parameters": {
                    "method.request.querystring.lat": true,
                    "method.request.querystring.lon": true,
                    "method.request.querystring.radius": false
                  }
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-suggestSongsByLocation",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/suggestSongsByLocation.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "SuggestSongsByLocationLambdaVersionIXpiMKsTZHkQGzKkq4poCvhMRPUynNcJ0uUyfJNXms"
        },
        "getRecentTracks": {
          "handler": "src/spotify/tracks/handlers/getRecentTracks.getRecentTracksHandler",
          "events": [
            {
              "http": {
                "path": "users/{userId}/spotify/recent-tracks",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-getRecentTracks",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getRecentTracks.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetRecentTracksLambdaVersionhTHgheDMEeJsVFGrG4PgMB3QMbVyUVr8CvQT2NVkeE"
        },
        "getTopTracks": {
          "handler": "src/spotify/tracks/handlers/getTopTracks.getTopTracksHandler",
          "events": [
            {
              "http": {
                "path": "users/{userId}/spotify/top-tracks",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-getTopTracks",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getTopTracks.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetTopTracksLambdaVersionQBH4mZXSDLhy2NqJPje1lq15sJnv9DKSarYIfRvHDU"
        },
        "getTopArtists": {
          "handler": "src/spotify/tracks/handlers/getTopArtists.getTopArtistsHandler",
          "events": [
            {
              "http": {
                "path": "users/{userId}/spotify/top-artists",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-getTopArtists",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getTopArtists.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetTopArtistsLambdaVersionwolLGNVMJo6bXl4UfiReP3KUnhERyZqi4l0VxTiYKI"
        },
        "getCurrentlyPlayingTrack": {
          "handler": "src/spotify/tracks/handlers/getCurrentlyPlayingTrack.getCurrentlyPlayingTrackHandler",
          "events": [
            {
              "http": {
                "path": "users/{userId}/spotify/currently-playing",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "request": {
                  "parameters": {
                    "method.request.path.userId": true
                  }
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-getCurrentlyPlayingTrack",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getCurrentlyPlayingTrack.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetCurrentlyPlayingTrackLambdaVersionSALxifadhMxfPVF5lWCOdBGPHv64I3ETFPuwdD1MU"
        },
        "createPlaylist": {
          "handler": "src/spotify/playlists/handlers/createPlaylist.createPlaylistHandler",
          "events": [
            {
              "http": {
                "path": "playlists/{userId}",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "request": {
                  "parameters": {
                    "method.request.path.userId": true
                  }
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-createPlaylist",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/createPlaylist.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CreatePlaylistLambdaVersionBp6me3UEkA9FXDqSdIVap7bIHYOIZ512TBuTkQCcI"
        },
        "addTrackToPlaylist": {
          "handler": "src/spotify/playlists/handlers/addTrackToPlaylist.addTrackToPlaylistHandler",
          "events": [
            {
              "http": {
                "path": "playlists/{userId}/{playlistId}/tracks",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "request": {
                  "parameters": {
                    "method.request.path.userId": true,
                    "method.request.path.playlistId": true
                  }
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-addTrackToPlaylist",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/addTrackToPlaylist.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "AddTrackToPlaylistLambdaVersionXBkTBIvIOwQJvR8ct5mWMlIdrWTrULDy42lfQ81SQU"
        },
        "removeTrackFromPlaylist": {
          "handler": "src/spotify/playlists/handlers/removeTrackFromPlaylist.removeTrackFromPlaylistHandler",
          "events": [
            {
              "http": {
                "path": "playlists/{userId}/{playlistId}/tracks",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "request": {
                  "parameters": {
                    "method.request.path.userId": true,
                    "method.request.path.playlistId": true
                  }
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-removeTrackFromPlaylist",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/removeTrackFromPlaylist.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "RemoveTrackFromPlaylistLambdaVersionjRi7ZqmWp0WD1Jb9esFmn1VufvLqETYHATFM8byuh4U"
        },
        "getPlaylistDetails": {
          "handler": "src/spotify/playlists/handlers/getPlaylistDetails.getPlaylistDetailsHandler",
          "events": [
            {
              "http": {
                "path": "playlists/{userId}/{playlistId}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "request": {
                  "parameters": {
                    "method.request.path.userId": true,
                    "method.request.path.playlistId": true
                  }
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-getPlaylistDetails",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/getPlaylistDetails.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetPlaylistDetailsLambdaVersion9UemFCBbDWYSLPNt8H1mkFnut51CZvUe9ZdHPL3yQ"
        },
        "deletePlaylist": {
          "handler": "src/spotify/playlists/handlers/deletePlaylist.deletePlaylistHandler",
          "events": [
            {
              "http": {
                "path": "playlists/{userId}/{playlistId}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-deletePlaylist",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/deletePlaylist.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "DeletePlaylistLambdaVersionrWbClJ7NiaNk1jo7Dv4yqu530EhMYZxugnxspnO0U"
        },
        "setPlaylistImage": {
          "handler": "src/spotify/playlists/handlers/setPlaylistImage.setPlaylistImageHandler",
          "events": [
            {
              "http": {
                "path": "playlists/{userId}/{playlistId}/image",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-setPlaylistImage",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/setPlaylistImage.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "SetPlaylistImageLambdaVersionRpesbiItoRavEjIARF0t4rGaEMR6HNmLztW1J8gimk"
        },
        "reverseGeocode": {
          "handler": "src/locations/handlers/reverseGeocode.reverseGeocodeHandler",
          "events": [
            {
              "http": {
                "path": "reverseGeocode",
                "method": "get",
                "request": {
                  "parameters": {
                    "method.request.querystring.latitude": true,
                    "method.request.querystring.longitude": true
                  }
                },
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "nostalgio-backend-dev-reverseGeocode",
          "package": {
            "artifact": "/Users/andresgarcia/Desktop/ACM_Projects/Nostalgio/server/.serverless/reverseGeocode.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "ReverseGeocodeLambdaVersionMNRpCoGfcKG6cQo56dUjibMnzukcGO43H64Z2zKPLM"
        }
      },
      "resources": {
        "Resources": {
          "AuthSessionData": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "AuthSessionData",
              "AttributeDefinitions": [
                {
                  "AttributeName": "UserId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "UserId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "TimeToLiveSpecification": {
                "AttributeName": "ExpiresAt",
                "Enabled": true
              }
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Users",
              "AttributeDefinitions": [
                {
                  "AttributeName": "UserId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "SpotifyUserId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "UserId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "SpotifyUserIdIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "SpotifyUserId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "StreamSpecification": {
                "StreamViewType": "NEW_AND_OLD_IMAGES"
              }
            }
          },
          "Memories": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Memories",
              "AttributeDefinitions": [
                {
                  "AttributeName": "memoryId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "city",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "memoryId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "CityUserIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "userId",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "city",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "UserMemoryIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "userId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "StreamSpecification": {
                "StreamViewType": "NEW_AND_OLD_IMAGES"
              }
            }
          },
          "ListeningHistoryTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "ListeningHistoryTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "geohash",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "timestamp",
                  "AttributeType": "N"
                },
                {
                  "AttributeName": "trackId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "geohash",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "timestamp",
                  "KeyType": "RANGE"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "TrackIdIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "trackId",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "timestamp",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "UserIdIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "userId",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "timestamp",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "StreamSpecification": {
                "StreamViewType": "NEW_AND_OLD_IMAGES"
              }
            }
          },
          "MusicSuggestionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "MusicSuggestionsTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "locationId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "locationId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "StreamSpecification": {
                "StreamViewType": "NEW_AND_OLD_IMAGES"
              }
            }
          }
        },
        "Outputs": {}
      }
    },
    "serviceRawFile": "org: andresgrc\napp: nostalgio-backend\nservice: nostalgio-backend\n\nprovider:\n  name: aws\n  runtime: nodejs18.x\n  region: us-east-1\n  environment:\n    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}\n    COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}\n    COGNITO_REDIRECT_URI: ${env:COGNITO_REDIRECT_URI}\n    SPOTIFY_CLIENT_ID: ${env:SPOTIFY_CLIENT_ID}\n    SPOTIFY_CLIENT_SECRET: ${env:SPOTIFY_CLIENT_SECRET}\n    SPOTIFY_REDIRECT_URI: ${env:SPOTIFY_REDIRECT_URI}\n    GOOGLE_API_KEY: ${env:GOOGLE_API_KEY}\n    USERS_TABLE: Users\n    MEMORIES_TABLE: Memories\n    AUTH_SESSION_TABLE: AuthSessionData\n    LISTENING_HISTORY_TABLE: ListeningHistoryTable\n    MUSIC_SUGGESTIONS_TABLE: MusicSuggestionsTable\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - \"cognito-idp:AdminCreateUser\"\n        - \"cognito-idp:AdminUpdateUserAttributes\"\n        - \"cognito-idp:AdminInitiateAuth\"\n        - \"cognito-idp:AdminRespondToAuthChallenge\"\n        - \"cognito-idp:ListUsers\"\n        - \"cognito-idp:AdminGetUser\"\n        - \"cognito-idp:AdminDeleteUser\"\n      Resource: arn:aws:cognito-idp:${self:provider.region}:*:userpool/${env:COGNITO_USER_POOL_ID}\n\n    - Effect: Allow\n      Action:\n        - \"lambda:InvokeFunction\"\n      Resource: \"*\"\n\n    - Effect: Allow\n      Action:\n        - \"dynamodb:Query\"\n        - \"dynamodb:PutItem\"\n        - \"dynamodb:GetItem\"\n        - \"dynamodb:UpdateItem\"\n        - \"dynamodb:DeleteItem\"\n        - \"dynamodb:DescribeStream\"\n        - \"dynamodb:GetRecords\"\n        - \"dynamodb:GetShardIterator\"\n      Resource:\n        - !GetAtt UsersTable.Arn\n        - !GetAtt UsersTable.StreamArn\n        - !GetAtt Memories.Arn\n        - !GetAtt Memories.StreamArn\n        - !GetAtt AuthSessionData.Arn\n        - !GetAtt ListeningHistoryTable.Arn\n        - !GetAtt ListeningHistoryTable.StreamArn\n        - !GetAtt MusicSuggestionsTable.Arn\n        - !GetAtt MusicSuggestionsTable.StreamArn\n        - arn:aws:dynamodb:${self:provider.region}:*:table/Users/index/SpotifyUserIdIndex\n        - arn:aws:dynamodb:${self:provider.region}:*:table/Memories/index/CityUserIndex\n        - arn:aws:dynamodb:${self:provider.region}:*:table/Memories/index/UserMemoryIndex\n        - arn:aws:dynamodb:${self:provider.region}:*:table/ListeningHistoryTable/index/TrackIdIndex\n        - arn:aws:dynamodb:${self:provider.region}:*:table/ListeningHistoryTable/index/UserIdIndex\n\n    - Effect: Allow\n      Action:\n        - \"logs:CreateLogGroup\"\n        - \"logs:CreateLogStream\"\n        - \"logs:PutLogEvents\"\n      Resource: \"*\"\n\npackage:\n  individually: true\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  # Authorization Handlers\n  spotifyAuth:\n    handler: src/auth/spotify/spotifyAuthHandler.spotifyAuthHandler\n    events:\n      - http:\n          path: auth/login\n          method: get\n          cors: true\n\n  spotifyCallback:\n    handler: src/auth/spotify/spotifyCallbackHandler.spotifyCallbackHandler\n    events:\n      - http:\n          path: callback\n          method: get\n          cors: true\n\n  exchangeSpotifyToken:\n    handler: src/auth/spotify/spotifyTokenManager.exchangeSpotifyToken\n    events:\n      - http:\n          path: exchangeSpotifyToken\n          method: post\n          cors: true\n\n  refreshSpotifyToken:\n    handler: src/auth/spotify/spotifyTokenManager.refreshSpotifyToken\n    events:\n      - http:\n          path: refreshSpotifyToken\n          method: post\n          cors: true\n\n  validateSpotifyToken:\n    handler: src/auth/spotify/spotifyTokenManager.validateSpotifyToken\n    events:\n      - http:\n          path: validateSpotifyToken/{userId}\n          method: post\n          cors: true\n\n  # User Handlers\n  createUser:\n    handler: src/users/handlers/createUser.createUserHandler\n    events:\n      - http:\n          path: users\n          method: post\n          cors: true\n\n  getUser:\n    handler: src/users/handlers/getUser.getUserHandler\n    events:\n      - http:\n          path: users/{userId}\n          method: get\n          cors: true\n      - http:\n          path: users/spotify/{spotifyUserId}\n          method: get\n          cors: true\n\n  updateUser:\n    handler: src/users/handlers/updateUser.updateUserHandler\n    events:\n      - http:\n          path: users/{userId}\n          method: put\n          cors: true\n\n  deleteUser:\n    handler: src/users/handlers/deleteUser.deleteUserHandler\n    events:\n      - http:\n          path: users/{userId}\n          method: delete\n          cors: true\n\n  # Memory Handlers\n  createMemory:\n    handler: src/memories/handlers/createMemory.createMemoryHandler\n    events:\n      - http:\n          path: memories\n          method: post\n          cors: true\n\n  getMemory:\n    handler: src/memories/handlers/getMemory.getMemoryHandler\n    events:\n      - http:\n          path: memories/{userId}/{memoryId}\n          method: get\n          cors: true\n\n  updateMemory:\n    handler: src/memories/handlers/updateMemory.updateMemoryHandler\n    events:\n      - http:\n          path: memories/{userId}/{memoryId}\n          method: put\n          cors: true\n\n  deleteMemory:\n    handler: src/memories/handlers/deleteMemory.deleteMemoryHandler\n    events:\n      - http:\n          path: memories/{userId}/{memoryId}\n          method: delete\n          cors: true\n\n  listMemories:\n    handler: src/memories/handlers/listMemories.listMemoriesHandler\n    events:\n      - http:\n          path: memories/{userId}\n          method: get\n          cors: true\n\n  getCityMemories:\n    handler: src/memories/handlers/getCityMemories.getCityMemoriesHandler\n    events:\n      - http:\n          path: memories/{userId}/city/{city}\n          method: get\n          cors: true\n  \n  addMemoryImage:\n    handler: src/memories/handlers/addMemoryImage.addMemoryImageHandler\n    events:\n      - http:\n          path: memories/{userId}/{memoryId}/image\n          method: put\n          cors: true\n\n  streamMemoryUpdates:\n    handler: src/memories/handlers/streamMemoryUpdates.streamMemoryUpdatesHandler\n    events:\n      - stream:\n          type: dynamodb\n          arn: !GetAtt Memories.StreamArn\n\n  # Listening History Handlers\n  storeListeningHistory:\n    handler: src/listeningHistory/handlers/storeListeningHistory.handler\n    events:\n      - http:\n          path: listening-history/store\n          method: post\n          cors: true\n\n  getListeningHistoryByLocation:\n    handler: src/listeningHistory/handlers/getListeningHistoryByLocation.handler\n    events:\n      - http:\n          path: listening-history/{lat}/{lon}\n          method: get\n          cors: true\n          request:\n            parameters:\n              paths:\n                lat: true   # Required path parameter\n                lon: true   # Required path parameter\n              querystrings:\n                radius: false  # Optional, handled in the handler code if omitted\n\n  # Music Suggestion Handler\n  suggestSongsByLocation:\n    handler: src/musicSuggestions/handlers/suggestSongsByLocation.handler\n    events:\n      - http:\n          path: users/{userId}/suggestions/location\n          method: get\n          cors: true\n          request:\n            parameters:\n              querystrings:\n                lat: true\n                lon: true\n                radius: false  # Optional parameter, defaults to null\n  \n  # Spotify Api Calls \n  getRecentTracks:\n    handler: src/spotify/tracks/handlers/getRecentTracks.getRecentTracksHandler\n    events:\n      - http:\n          path: /users/{userId}/spotify/recent-tracks\n          method: get\n          cors: true\n\n  getTopTracks:\n    handler: src/spotify/tracks/handlers/getTopTracks.getTopTracksHandler\n    events:\n      - http:\n          path: /users/{userId}/spotify/top-tracks\n          method: get\n          cors: true\n\n  getTopArtists:\n    handler: src/spotify/tracks/handlers/getTopArtists.getTopArtistsHandler\n    events:\n      - http:\n          path: /users/{userId}/spotify/top-artists\n          method: get\n          cors: true\n  \n  getCurrentlyPlayingTrack:\n    handler: src/spotify/tracks/handlers/getCurrentlyPlayingTrack.getCurrentlyPlayingTrackHandler\n    events:\n      - http:\n          path: users/{userId}/spotify/currently-playing\n          method: get\n          cors: true\n          request:\n            parameters:\n              paths:\n                userId: true\n\n# Spotify Playlist Handlers\n  createPlaylist:\n    handler: src/spotify/playlists/handlers/createPlaylist.createPlaylistHandler\n    events:\n      - http:\n          path: playlists/{userId}\n          method: post\n          cors: true\n          request:\n            parameters:\n              paths:\n                userId: true\n\n  addTrackToPlaylist:\n    handler: src/spotify/playlists/handlers/addTrackToPlaylist.addTrackToPlaylistHandler\n    events:\n      - http:\n          path: playlists/{userId}/{playlistId}/tracks\n          method: post\n          cors: true\n          request:\n            parameters:\n              paths:\n                userId: true\n                playlistId: true\n\n  removeTrackFromPlaylist:\n    handler: src/spotify/playlists/handlers/removeTrackFromPlaylist.removeTrackFromPlaylistHandler\n    events:\n      - http:\n          path: playlists/{userId}/{playlistId}/tracks\n          method: delete\n          cors: true\n          request:\n            parameters:\n              paths:\n                userId: true\n                playlistId: true\n\n  getPlaylistDetails:\n    handler: src/spotify/playlists/handlers/getPlaylistDetails.getPlaylistDetailsHandler\n    events:\n      - http:\n          path: playlists/{userId}/{playlistId}\n          method: get\n          cors: true\n          request:\n            parameters:\n              paths:\n                userId: true\n                playlistId: true\n  \n  deletePlaylist:\n    handler: src/spotify/playlists/handlers/deletePlaylist.deletePlaylistHandler\n    events:\n      - http:\n          path: playlists/{userId}/{playlistId}\n          method: delete\n          cors: true\n  \n  setPlaylistImage:\n    handler: src/spotify/playlists/handlers/setPlaylistImage.setPlaylistImageHandler\n    events:\n      - http:\n          path: playlists/{userId}/{playlistId}/image\n          method: put\n          cors: true\n# Location Handlers\n  reverseGeocode:\n    handler: src/locations/handlers/reverseGeocode.reverseGeocodeHandler\n    events:\n      - http:\n          path: reverseGeocode\n          method: get\n          request:\n            parameters:\n              querystrings:\n                latitude: true\n                longitude: true\n          cors: true\n\nresources:\n  Resources:\n    AuthSessionData:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: AuthSessionData\n        AttributeDefinitions:\n          - AttributeName: UserId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: UserId\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n        TimeToLiveSpecification:\n          AttributeName: ExpiresAt\n          Enabled: true\n\n    UsersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: Users\n        AttributeDefinitions:\n          - AttributeName: UserId\n            AttributeType: S\n          - AttributeName: SpotifyUserId  # Define SpotifyUserId for GSI\n            AttributeType: S\n        KeySchema:\n          - AttributeName: UserId\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: SpotifyUserIdIndex\n            KeySchema:\n              - AttributeName: SpotifyUserId\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n        BillingMode: PAY_PER_REQUEST\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n\n    Memories:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: Memories\n        AttributeDefinitions:\n          - AttributeName: memoryId\n            AttributeType: S\n          - AttributeName: city\n            AttributeType: S\n          - AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: memoryId\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: CityUserIndex  # GSI for querying by userId and city\n            KeySchema:\n              - AttributeName: userId\n                KeyType: HASH\n              - AttributeName: city\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n          - IndexName: UserMemoryIndex  # GSI for querying by userId\n            KeySchema:\n              - AttributeName: userId\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n        BillingMode: PAY_PER_REQUEST\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n\n\n    ListeningHistoryTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ListeningHistoryTable\n        AttributeDefinitions:\n          - AttributeName: geohash\n            AttributeType: S  # Partition key to store geohash (latitude + longitude)\n          - AttributeName: timestamp\n            AttributeType: N  # Sort key to store timestamp as a number\n          - AttributeName: trackId\n            AttributeType: S  # GSI for querying by trackId\n          - AttributeName: userId\n            AttributeType: S  # GSI for querying by userId\n        KeySchema:\n          - AttributeName: geohash\n            KeyType: HASH  # Partition key (location)\n          - AttributeName: timestamp\n            KeyType: RANGE  # Sort key (timestamp)\n        GlobalSecondaryIndexes:\n          - IndexName: TrackIdIndex\n            KeySchema:\n              - AttributeName: trackId\n                KeyType: HASH  # GSI for trackId\n              - AttributeName: timestamp\n                KeyType: RANGE  # Sort by timestamp for tracks\n            Projection:\n              ProjectionType: ALL\n          - IndexName: UserIdIndex\n            KeySchema:\n              - AttributeName: userId\n                KeyType: HASH  # GSI for userId\n              - AttributeName: timestamp\n                KeyType: RANGE  # Sort by timestamp for user queries\n            Projection:\n              ProjectionType: ALL\n        BillingMode: PAY_PER_REQUEST\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES  # Enable streams for listening history\n\n    MusicSuggestionsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: MusicSuggestionsTable\n        AttributeDefinitions:\n          - AttributeName: locationId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: locationId\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n",
    "command": [
      "deploy"
    ],
    "options": {
      "aws-profile": "nostalgio"
    },
    "error": null,
    "params": {},
    "machineId": "c00d503306b5d4c7f7a0150162644f1c",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "73cf6885-c605-4023-ad42-d2d326d4cbf3",
    "orgName": "andresgrc",
    "userId": "MWDhB71wnF3G0XJfPC",
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": false,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "spQMvs2cCDKRYgzLWc",
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "andresgrc",
    "subscription": null,
    "userEmail": "itsandresgarciasanchez@gmail.com",
    "serviceProviderAwsRegion": "us-east-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "061039789554",
    "projectType": "traditional",
    "versionSf": "4.4.5",
    "serviceProviderAwsCfStackName": "nostalgio-backend-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:us-east-1:061039789554:stack/nostalgio-backend-dev/73fa8e50-86a9-11ef-9a27-0affcff57b31",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:061039789554:stack/nostalgio-backend-dev/73fa8e50-86a9-11ef-9a27-0affcff57b31",
    "serviceProviderAwsCfStackCreated": "2024-10-10T01:46:22.707Z",
    "serviceProviderAwsCfStackUpdated": "2024-10-10T03:01:06.376Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "GetMemoryLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-getMemory:133",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-GetMemoryLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetCurrentlyPlayingTrackLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-getCurrentlyPlayingTrack:27",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-GetCurrentlyPlayingTrackLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetPlaylistDetailsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-getPlaylistDetails:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-GetPlaylistDetailsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ExchangeSpotifyTokenLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-exchangeSpotifyToken:133",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-ExchangeSpotifyTokenLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-getUser:133",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-GetUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetTopTracksLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-getTopTracks:42",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-GetTopTracksLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ListMemoriesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-listMemories:88",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-ListMemoriesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetListeningHistoryByLocationLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-getListeningHistoryByLocation:44",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-GetListeningHistoryByLocationLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-55cebd6e-28d6",
        "ExportName": "sls-nostalgio-backend-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "GetRecentTracksLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-getRecentTracks:38",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-GetRecentTracksLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "SpotifyAuthLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-spotifyAuth:133",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-SpotifyAuthLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "SuggestSongsByLocationLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-suggestSongsByLocation:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-SuggestSongsByLocationLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-createUser:133",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-CreateUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ValidateSpotifyTokenLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-validateSpotifyToken:109",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-ValidateSpotifyTokenLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AddTrackToPlaylistLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-addTrackToPlaylist:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-AddTrackToPlaylistLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-deleteUser:133",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-DeleteUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateMemoryLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-createMemory:133",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-CreateMemoryLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "StoreListeningHistoryLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-storeListeningHistory:44",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-StoreListeningHistoryLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteMemoryLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-deleteMemory:133",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-DeleteMemoryLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "SpotifyCallbackLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-spotifyCallback:133",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-SpotifyCallbackLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-updateUser:133",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-UpdateUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetTopArtistsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-getTopArtists:32",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-GetTopArtistsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeletePlaylistLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-deletePlaylist:6",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-DeletePlaylistLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateMemoryLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-updateMemory:133",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-UpdateMemoryLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ReverseGeocodeLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-reverseGeocode:12",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-ReverseGeocodeLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreatePlaylistLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-createPlaylist:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-CreatePlaylistLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetCityMemoriesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-getCityMemories:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-GetCityMemoriesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "RefreshSpotifyTokenLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-refreshSpotifyToken:107",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-RefreshSpotifyTokenLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "StreamMemoryUpdatesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-streamMemoryUpdates:133",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-StreamMemoryUpdatesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AddMemoryImageLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-addMemoryImage:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-AddMemoryImageLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "RemoveTrackFromPlaylistLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-removeTrackFromPlaylist:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-RemoveTrackFromPlaylistLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "SetPlaylistImageLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:061039789554:function:nostalgio-backend-dev-setPlaylistImage:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-nostalgio-backend-dev-SetPlaylistImageLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://0446xh4ok5.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-nostalgio-backend-dev-ServiceEndpoint"
      }
    ]
  }
}